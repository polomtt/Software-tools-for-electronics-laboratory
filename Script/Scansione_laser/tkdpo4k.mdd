<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>tkdpo4k</DriverName>
   <DriverType>MATLAB IVI-C</DriverType>
   <InstrumentType>IVIInstrument</InstrumentType>
   <InstrumentManufacturer>Tektronix, Inc.</InstrumentManufacturer>
   <InstrumentModel>TEK DPO4000 series oscilloscope</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>initwithoptions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InstrumentHandle] = initwithoptions(obj, ResourceName, IDQuery, ResetDevice, OptionString)

libname = get(obj, 'DriverName');
session = get(obj, 'Interface');
ResourceName = [double(ResourceName) 0];
OptionString = [double(OptionString) 0];
InstrumentHandle = libpointer('uint32Ptr', 0);

status = calllib(libname, 'tkdpo4k_InitWithOptions', ResourceName, IDQuery, ResetDevice, OptionString, InstrumentHandle);

InstrumentHandle = double(InstrumentHandle.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function performs the following initialization actions:

- Creates a new IVI instrument driver and optionally sets the initial state of the following session attributes:

    TKDPO4K_ATTR_RANGE_CHECK         
    TKDPO4K_ATTR_QUERY_INSTRUMENT_STATUS  
    TKDPO4K_ATTR_CACHE               
    TKDPO4K_ATTR_SIMULATE            
    TKDPO4K_ATTR_RECORD_COERCIONS    

- Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.

- If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.

- If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.

- Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.

- Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.

Note: This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so. You can use the same session in multiple program threads. You can use the tkdpo4k_LockSession and tkdpo4k_UnlockSession functions to protect sections of code that require exclusive access to the resource.

Content from the IVI specifications reproduced with permission from the IVI Foundation. 
 
The IVI Foundation and its member companies make no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The IVI Foundation and its member companies shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition_Start_Time</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250109);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250109 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform record occurs after the trigger event. If the value is negative, the first point in the waveform record occurs before the trigger event. The units are seconds. 
    "</Description>
            </Property>
            <Property>
               <Name>Acquisition_Type</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250101);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250101 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how the oscilloscope acquires data and fills the waveform record. 

When you set this attribute to TKDPO4K_VAL_NORMAL, TKDPO4K_VAL_HI_RES, or TKDPO4K_VAL_AVERAGE, the oscilloscope acquires one waveform with different methods. To retrieve the waveforms, use the tkdpo4k_ReadWaveform and tkdpo4k_FetchWaveform functions.

When you set this attribute to TKDPO4K_VAL_ENVELOPE or TKDPO4K_VAL_PEAK_DETECT, the oscilloscope acquires the minimum and maximum waveforms. To retrieve the minimum and maximum waveforms, use the tkdpo4k_ReadMinMaxWaveform and tkdpo4k_FetchMinMaxWaveform functions.
"</Description>
            </Property>
            <Property>
               <Name>Fast_Acquisition_State</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the state of fast acquisition mode.

SCPI Command:
:ACQuire:FASTAcq:STATE"</Description>
            </Property>
            <Property>
               <Name>Fast_Acquisition_Waveform_Grading</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151003 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the waveform grading for fast acquisition mode.

SCPI Command:
:ACQuire:FASTAcq:PALEtte"</Description>
            </Property>
            <Property>
               <Name>Horizontal_Minimum_Number_Of_Points</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250009 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the minimum number of points you require in the waveform record for each channel. This instrument driver uses the value you specify to configure the record length that the oscilloscope uses for waveform acquisition. Use the TKDPO4K_ATTR_HORZ_RECORD_LENGTH attribute to obtain the actual record length."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Record_Length</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the actual number of points the oscilloscope acquires for each channel. The value is equal to or greater than the minimum number of points you specify with the TKDPO4K_ATTR_HORZ_MIN_NUM_PTS attribute. Allocate a ViReal64 array of this size or greater to pass as the Waveform Array parameter of the tkdpo4k_ReadWaveform and tkdpo4k_FetchWaveform functions."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Sample_Rate</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250010);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the effective digitizing rate using the current configuration. The units are samples per second. This is instrument model dependent attribute.
"</Description>
            </Property>
            <Property>
               <Name>Horizontal_Time_Per_Record</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250007);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250007 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time in seconds that corresponds to the record length."</Description>
            </Property>
            <Property>
               <Name>Initiate_Continuous</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250107);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250107, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the oscilloscope continuously initiates waveform acquisition. If you set this attribute to VI_TRUE, the oscilloscope immediately waits for another trigger after the previous waveform acquisition is complete. If you set this attribute to VI_FALSE, the oscilloscope stops after it has acquired enough waveforms to satisfy the conditions of the acquisition mode. "</Description>
            </Property>
            <Property>
               <Name>Magnivu_Enabled</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150153);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150153, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to enable the MagniVu feature, which provides up to 32 times signal detail for fast viewing of short events. This feature is not recommended for slow data formats such as RS232.

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
            <Property>
               <Name>Number_Of_Averages</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250104);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250104 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>32.0</Value>
                     <Value>256.0</Value>
                     <Value>512.0</Value>
                     <Value>8.0</Value>
                     <Value>16.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>128.0</Value>
                     <Value>64.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of waveforms the oscilloscope acquires and averages. After  acquiring the specified number of waveforms, the oscilloscope returns to the idle state. This attribute affects instrument behavior only when the TKDPO4K_ATTR_ACQUISITION_TYPE attribute is set to TKDPO4K_VAL_AVERAGE.
        
Valid Range: 2 to 512

Resolution: power of two
"</Description>
            </Property>
            <Property>
               <Name>Number_Of_Envelopes</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250105 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of waveforms that the oscilloscope acquires and analyzes to create the minimum and maximum waveforms. After each waveform acquisition, the oscilloscope keeps the minimum and maximum values it finds for each point in the waveform record. After the oscilloscope acquires the waveforms, it returns to the idle state. This attribute affects instrument behavior only when the TKDPO4K_ATTR_ACQUISITION_TYPE attribute is set to TKDPO4K_VAL_ENVELOPE.

Valid Range: TKDPO4K_VAL_INFINITE (0) TKDPO4K_VAL_INFINITE specifies continuous enveloping."</Description>
            </Property>
            <Property>
               <Name>Sample_Mode</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the sample mode the oscilloscope is currently using.

  "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUS1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BUS_Select</Name>
               <Location>BUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150093);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150093 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the BUS channel.

Notes: You must specify the BUS channel before configuring other BUS subsystem attributes."</Description>
            </Property>
            <Property>
               <Name>BUS_State</Name>
               <Location>BUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150133);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150133, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to turn the BUS on or off."</Description>
            </Property>
            <Property>
               <Name>BUS_Type</Name>
               <Location>BUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150132);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150132 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the BUS type."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSCAN</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSCAN1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BUS_CAN_Bit_Rate</Name>
               <Location>BUSCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150134);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150134 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>8.0</Value>
                     <Value>9.0</Value>
                     <Value>4.0</Value>
                     <Value>10.0</Value>
                     <Value>7.0</Value>
                     <Value>1.0</Value>
                     <Value>13.0</Value>
                     <Value>14.0</Value>
                     <Value>11.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>5.0</Value>
                     <Value>12.0</Value>
                     <Value>6.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the bit rate for CAN."</Description>
            </Property>
            <Property>
               <Name>BUS_CAN_Probe</Name>
               <Location>BUSCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150135);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150135 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the probing method to use in probing the CAN signal."</Description>
            </Property>
            <Property>
               <Name>BUS_CAN_Source</Name>
               <Location>BUSCAN</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150136);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150136 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for CAN data source.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSEthernet</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSEthernet1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Differential_Input_Data_Source</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150208);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150208 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>8.0</Value>
                     <Value>7.0</Value>
                     <Value>6.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet probe type. 

Valid Values
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_CH1 - Channe1
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_CH2 - Channe2
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_CH3 - Channe3
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_CH4 - Channe4
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_MATH - Math
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_REF1 - Reference1
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_REF2 - Reference2
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_REF3 - Reference3
TKDPO4K_VAL_ENET_DIFF_INPUT_DATA_SRC_REF4 - Reference4
"</Description>
            </Property>
            <Property>
               <Name>Ethernet_DMINUS_Data_Source</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150209);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150209 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"specifies the ethernet data source for D- input. 

Valid Values
TKDPO4K_VAL_ENET_MINUS_DATA_SRC_CH1 - Channe1
TKDPO4K_VAL_ENET_MINUS_DATA_SRC_CH2 - Channe2
TKDPO4K_VAL_ENET_MINUS_DATA_SRC_CH3 - Channe3
TKDPO4K_VAL_ENET_MINUS_DATA_SRC_CH4 - Channe4
"</Description>
            </Property>
            <Property>
               <Name>Ethernet_DPLUS_Data_Source</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150207);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150207 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet data source for D+ input. 
Valid Values
TKDPO4K_VAL_ENET_PLUS_DATA_CH1 - Channe1
TKDPO4K_VAL_ENET_PLUS_DATA_CH2 - Channe2
TKDPO4K_VAL_ENET_PLUS_DATA_CH3 - Channe3
TKDPO4K_VAL_ENET_PLUS_DATA_CH4 - Channe4
"</Description>
            </Property>
            <Property>
               <Name>Ethernet_Protocol</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150210);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150210 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet protocol for decode.

Valid Values
TKDPO4K_VAL_ENET_PROT_IPV4 - IPV4
TKDPO4K_VAL_ENET_PROT_OTHERS - Others
"</Description>
            </Property>
            <Property>
               <Name>Ethernet_Type</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150205);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150205 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet standard type.

Valid Values
TKDPO4K_VAL_ENET_ENET10BASET - ENET10BASET
TKDPO4K_VAL_ENET_ENET100BASETX - ENET100BASETX"</Description>
            </Property>
            <Property>
               <Name>Probe_Type</Name>
               <Location>BUSEthernet</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150206 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet probe type. 

Valid Values
TKDPO4K_VAL_ENET_PROBE_DIFF - Differential
TKDPO4K_VAL_ENET_PROBE_SING - Single Ended"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSI2C</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSI2C1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BUS_I2C_Clock_Source</Name>
               <Location>BUSI2C</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150138);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150138 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for I2C clock line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
            <Property>
               <Name>BUS_I2C_Data_Source</Name>
               <Location>BUSI2C</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150139);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150139 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for I2C data line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSParallel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSParallel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BUS_Parallel_Bits_Source</Name>
               <Location>BUSParallel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150160, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150160 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the sources for all 16 bits. Different channels are separated by commas.

Valid Channels: 
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
            <Property>
               <Name>Bus_Parallel_Clock_Edge</Name>
               <Location>BUSParallel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150161);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150161 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the parallel clock edge.

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
            <Property>
               <Name>Bus_Parallel_Clock_Locked</Name>
               <Location>BUSParallel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150162);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150162, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the parallel bus clock function.

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
            <Property>
               <Name>Bus_Parallel_Clock_Source</Name>
               <Location>BUSParallel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150163);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150163 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>65.0</Value>
                     <Value>64.0</Value>
                     <Value>63.0</Value>
                     <Value>62.0</Value>
                     <Value>59.0</Value>
                     <Value>61.0</Value>
                     <Value>58.0</Value>
                     <Value>60.0</Value>
                     <Value>57.0</Value>
                     <Value>56.0</Value>
                     <Value>55.0</Value>
                     <Value>54.0</Value>
                     <Value>53.0</Value>
                     <Value>52.0</Value>
                     <Value>51.0</Value>
                     <Value>50.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the parallel bus source.

Valid Channels: 
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
            <Property>
               <Name>Bus_Parallel_Width</Name>
               <Location>BUSParallel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150164);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150164 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of bits for the width of the parallel bus.

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSRS232</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSRS2321" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bus_RS232_Bit_Rate</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150170);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150170 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>4800.0</Value>
                     <Value>14400.0</Value>
                     <Value>230400.0</Value>
                     <Value>57600.0</Value>
                     <Value>1843200.0</Value>
                     <Value>15200.0</Value>
                     <Value>150.0</Value>
                     <Value>7200.0</Value>
                     <Value>600.0</Value>
                     <Value>1200.0</Value>
                     <Value>128000.0</Value>
                     <Value>2000.0</Value>
                     <Value>115200.0</Value>
                     <Value>134.0</Value>
                     <Value>460800.0</Value>
                     <Value>1382400.0</Value>
                     <Value>28800.0</Value>
                     <Value>2400.0</Value>
                     <Value>300.0</Value>
                     <Value>1800.0</Value>
                     <Value>75.0</Value>
                     <Value>921600.0</Value>
                     <Value>56000.0</Value>
                     <Value>2764800.0</Value>
                     <Value>9600.0</Value>
                     <Value>19200.0</Value>
                     <Value>110.0</Value>
                     <Value>3600.0</Value>
                     <Value>38400.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RS232 bit rate."</Description>
            </Property>
            <Property>
               <Name>Bus_RS232_Data_Bits</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150171);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150171 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>8.0</Value>
                     <Value>7.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of RS232 data bits."</Description>
            </Property>
            <Property>
               <Name>Bus_RS232_Delimiter</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150172);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150172 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RS232 delimiting value for a packet on the bus."</Description>
            </Property>
            <Property>
               <Name>Bus_RS232_Parity</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150173);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150173 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RS232C parity."</Description>
            </Property>
            <Property>
               <Name>Bus_RS232_RX_Source</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150174);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150174 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>65.0</Value>
                     <Value>64.0</Value>
                     <Value>63.0</Value>
                     <Value>62.0</Value>
                     <Value>59.0</Value>
                     <Value>61.0</Value>
                     <Value>58.0</Value>
                     <Value>60.0</Value>
                     <Value>57.0</Value>
                     <Value>56.0</Value>
                     <Value>55.0</Value>
                     <Value>54.0</Value>
                     <Value>53.0</Value>
                     <Value>52.0</Value>
                     <Value>51.0</Value>
                     <Value>50.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RS232 RX source.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
            <Property>
               <Name>Bus_RS232_TX_Source</Name>
               <Location>BUSRS232</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150175);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150175 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>65.0</Value>
                     <Value>64.0</Value>
                     <Value>63.0</Value>
                     <Value>62.0</Value>
                     <Value>59.0</Value>
                     <Value>61.0</Value>
                     <Value>58.0</Value>
                     <Value>60.0</Value>
                     <Value>57.0</Value>
                     <Value>56.0</Value>
                     <Value>55.0</Value>
                     <Value>54.0</Value>
                     <Value>53.0</Value>
                     <Value>52.0</Value>
                     <Value>51.0</Value>
                     <Value>50.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RS232 TX source.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>BUSSPI</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BUSSPI1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BUS_SPI_MISO_Polarity</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150140);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150140 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the SPI MISO polarity."</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_MISO_Source</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150144);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150144 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for SPI MISO line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_MOSI_Polarity</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150141);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150141 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the SPI MOSI polarity.
"</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_MOSI_Source</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150145);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150145 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for SPI MOSI line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_SCLK_Polarity</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150142);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150142 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the SPI SCLK polarity."</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_SCLK_Source</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150146);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150146 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for SPI SCLK line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_SS_Polarity</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150143);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150143 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the SPI SS polarity."</Description>
            </Property>
            <Property>
               <Name>BUS_SPI_SS_Source</Name>
               <Location>BUSSPI</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150147);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150147 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the channel for SPI SS line.

Valid Channels: 
For four-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2
TKDPO4K_VAL_SOUR_CH3 - Channel 3
TKDPO4K_VAL_SOUR_CH4 - Channel 4

For two-channel modules:
TKDPO4K_VAL_SOUR_CH1 - Channel 1
TKDPO4K_VAL_SOUR_CH2 - Channel 2

For MSO models:
TKDPO4K_VAL_SOUR_D0  - Digital Channel 0
TKDPO4K_VAL_SOUR_D1  - Digital Channel 1
TKDPO4K_VAL_SOUR_D2  - Digital Channel 2
TKDPO4K_VAL_SOUR_D3  - Digital Channel 3
TKDPO4K_VAL_SOUR_D4  - Digital Channel 4
TKDPO4K_VAL_SOUR_D5  - Digital Channel 5
TKDPO4K_VAL_SOUR_D6  - Digital Channel 6
TKDPO4K_VAL_SOUR_D7  - Digital Channel 7
TKDPO4K_VAL_SOUR_D8  - Digital Channel 8
TKDPO4K_VAL_SOUR_D9  - Digital Channel 9
TKDPO4K_VAL_SOUR_D10 - Digital Channel 10
TKDPO4K_VAL_SOUR_D11 - Digital Channel 11
TKDPO4K_VAL_SOUR_D12 - Digital Channel 12
TKDPO4K_VAL_SOUR_D13 - Digital Channel 13
TKDPO4K_VAL_SOUR_D14 - Digital Channel 14
TKDPO4K_VAL_SOUR_D15 - Digital Channel 15"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Channel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Channel_Enabled</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute applies to all channels CH1, CH2, (CH3, CH4), MATH, REF1-REF4, (D0-D15), RF_AMP, RF_FREQ, RF_PHAS, RF_NORMAL, RF_MINH, RF_MAXH and RF_AVERAGE. It specifies to turn on or turn off the display of the specified waveform."</Description>
            </Property>
            <Property>
               <Name>Digital_Threshold</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150152);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150152 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute is valid only for digital channels D0-D15. It specifies the threshold for the digital channel. The units are volts."</Description>
            </Property>
            <Property>
               <Name>Input_Impedance</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250103 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>1000000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute is valid only for input channels CH1, CH2, (CH3, CH4). It specifies the input impedance for the channel. The units are ohms.
    "</Description>
            </Property>
            <Property>
               <Name>Lower_Threshold</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150199);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150199 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the lower threshold.

    "</Description>
            </Property>
            <Property>
               <Name>Max_Input_Frequency</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250006 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute specifies the maximum input frequency of the channel.  Express this value as the frequency at which the input circuitry attenuates the input signal by 3 dB. The units for this attribute are hertz.

Valid values depend on instrument model:
---------------------------------------------------------------
 Model                 |    Twenty      TwoFifty      Full
---------------------------------------------------------------
 DPO 4104, MSO4104     |    20e6        250e6         1000e6
 DPO 4054, MSO4054     |    20e6        250e6         500e6
 DPO 4034, MSO4034     |    20e6        250e6         350e6
 DPO 4032, MSO4032     |    20e6        250e6         350e6
----------------------------------------------------------------

---------------------------------------------------------------
 Model                 |    Twenty      OneFifty      Full
---------------------------------------------------------------
 DPO 3032, DPO3034     |    20e6        150e6         300e6
 DPO 3052, DPO3054     |    20e6        150e6         500e6
----------------------------------------------------------------

---------------------------------------------------------------
 Model                 |    Twenty      Full
---------------------------------------------------------------
 DPO 3012, DPO3014     |    20e6        100e6
----------------------------------------------------------------

Default values depend on instrument model: 
-------------------------------
 Model     |   Default value
-------------------------------
 DPO 4104  |   1000e6
 DPO 4054  |   500e6
 DPO 4034  |   350e6
 DPO 4032  |   350e6
 DPO 3012  |   100e6
 DPO 3014  |   100e6
 DPO 3032  |   300e6
 DPO 3034  |   300e6
 DPO 3052  |   500e6
 DPO 3054  |   500e6
-------------------------------

Resolution: All values are coerced to Valid values.
"</Description>
            </Property>
            <Property>
               <Name>Probe_Attenuation</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250004 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>500.0</Value>
                     <Value>50.0</Value>
                     <Value>0.5</Value>
                     <Value>0.2</Value>
                     <Value>0.1</Value>
                     <Value>200.0</Value>
                     <Value>1000.0</Value>
                     <Value>0.0050</Value>
                     <Value>2.0</Value>
                     <Value>0.0020</Value>
                     <Value>0.0010</Value>
                     <Value>10.0</Value>
                     <Value>-1.0</Value>
                     <Value>100.0</Value>
                     <Value>20.0</Value>
                     <Value>1.0</Value>
                     <Value>0.05</Value>
                     <Value>0.02</Value>
                     <Value>0.01</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute applies only to input channels CH1, CH2, (CH3, CH4). It specifies the scaling factor by which the probe you attach to the channel attenuates the input. For example, when you use a 10:1 probe, set this attribute to 10.0.

This driver reserves negative values to control the oscilloscope's automatic probe sense capability. Setting this attribute to TKDPO4K_VAL_PROBE_SENSE_ON configures the oscilloscope to sense the attenuation of the probe automatically. After you enable the automatic probe sense, subsequent queries of this attribute return the value TKDPO4K_VAL_PROBE_SENSE_ON. Use the TKDPO4K_ATTR_PROBE_SENSE_VALUE attribute to obtain the actual probe attenuation.

If you set the oscilloscope to sense the probe attenuation automatically, the probe attenuation value can change at any time. When the oscilloscope detects a new probe attenuation value, other settings in the oscilloscope might also change.  The driver has no way of knowing when these changes occur. Therefore, when you enable the automatic probe sense capability, this driver disables caching for attributes that depend on the probe attenuation. These attributes include TKDPO4K_ATTR_VERTICAL_RANGE, TKDPO4K_ATTR_VERTICAL_OFFSET. To maximize performance, set this attribute to a manual probe attenuation setting.

If the oscilloscope is set to sense the probe attenuation automatically, setting this attribute to a positive value disables the automatic probe sense and configures the oscilloscope to use the manual probe attenuation you specify.

If you use a manual probe attenuation, you must set this attribute to reflect the new probe attenuation each time you attach a different probe."</Description>
            </Property>
            <Property>
               <Name>Probe_Sense_Value</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250108);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This channel-based attribute is valid only for input channels CH1, CH2, (CH3, CH4). It returns the probe attenuation value the oscilloscope automatically senses.
"</Description>
            </Property>
            <Property>
               <Name>Upper_Threshold</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150198);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150198 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the upper threshold.

    "</Description>
            </Property>
            <Property>
               <Name>Vertical_Coupling</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250003 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute is valid only for input channels CH1, CH2, (CH3, CH4). It specifies how the oscilloscope couples the input signal for the channel.
    "</Description>
            </Property>
            <Property>
               <Name>Vertical_Offset</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute is valid only for input channels CH1, CH2, (CH3, CH4). It specifies the location of the center of the range that you specify with the TKDPO4K_ATTR_VERTICAL_RANGE attribute. Express the value in volts relative to ground. For example, to acquire a sine wave that spans between 0.0 and 10.0 volts, set this attribute to 5.0 volts.
    
Range and Resolution:

Vertical_Scale = (Vertical_Range / 10.0) / Probe_Attenuation

When (1e-3 &lt;= Vertical_Scale &lt;= 9.95e-3): 
  Valid Range = -0.1 to 0.1
  Resolution = 1.0e-5

When (9.95e-3 &lt;= Vertical_Scale &lt;= 99.5e-3): 
  Valid Range = -1.0 to 1.0
  Resolution = 1.0e-4

When (99.5e-3 &lt;= Vertical_Scale &lt;= 995.0e-3): 
  Valid Range = -10.0 to 10.0
  Resolution = 1.0e-3

When (995.0e-3 &lt;= Vertical_Scale &lt;= 10.0): 
  Valid Range = -100.0 to 100.0
  Resolution = 1.0e-2
"</Description>
            </Property>
            <Property>
               <Name>Vertical_Range</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250001 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.5</Value>
                     <Value>5.0</Value>
                     <Value>50.0</Value>
                     <Value>0.2</Value>
                     <Value>20.0</Value>
                     <Value>1.0</Value>
                     <Value>0.01</Value>
                     <Value>2.0</Value>
                     <Value>0.05</Value>
                     <Value>0.1</Value>
                     <Value>100.0</Value>
                     <Value>10.0</Value>
                     <Value>0.02</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This channel-based attribute is valid only for input channels CH1, CH2, (CH3, CH4). It specifies the absolute value of the input range the oscilloscope can acquire for the channel. The units are volts. For example, to acquire a sine wave that spans between 0.0 and 10.0 volts, you set this attribute to 10.0 volts.

Valid Range:  The probe attenuation determines the valid range for this attribute  as follows:
 
(80.0e-3 * Probe_Attenuation) to (80.0 * Probe_Attenuation) volts 

Resolution: This attribute is coerced to a 1-2-5 step.
"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Configuration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Configuration1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>autosetup</Name>
               <Location>Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function autosetup(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_AutoSetup', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function automatically configures the instrument.

Note: When you call this function, the oscilloscope senses the input signal and automatically configures many of the instrument settings. The settings no longer match the cache values for the corresponding attributes. Therefore, this function invalidates all attribute cache values.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>actualrecordlength</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ActualRecordLength] = actualrecordlength(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ActualRecordLength = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_ActualRecordLength', session, ActualRecordLength);

ActualRecordLength = double(ActualRecordLength.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the actual number of points the oscilloscope acquires for each channel. After you configure the oscilloscope for an acquisition, call this function to determine the size of the waveforms that the oscilloscope acquires. The value is equal to or greater than the minimum number of points you specify in the tkdpo4k_ConfigureAcquisitionRecord function.  

You must allocate a ViReal64 array of this size or greater to pass as the Waveform Array parameter of the tkdpo4k_ReadWaveform and tkdpo4k_FetchWaveform functions.

Note: The oscilloscope may use different size records depending on the acquisition type. You specify the acquisition type with the tkdpo4k_ConfigureAcquisitionType function.</Description>
            </Method>
            <Method>
               <Name>configureacquisitionrecord</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisitionrecord(obj, TimePerRecordseconds, MinimumRecordLength, AcquisitionStartTimesecond)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureAcquisitionRecord', session, TimePerRecordseconds, MinimumRecordLength, AcquisitionStartTimesecond);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes of the acquisition subsystem. These attributes are the time per record, minimum record length, and acquisition start time.</Description>
            </Method>
            <Method>
               <Name>configureacquisitiontype</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisitiontype(obj, AquisitionType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureAcquisitionType', session, AquisitionType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures how the oscilloscope acquires data and fills the waveform record.  

When you configure the acquisition type to Normal, HiRes or Average, the oscilloscope acquires only one waveform. To retrieve the waveform, you should use tkdpo4k_ReadWaveform or tkdpo4k_FetchWaveform functions.

When you configure the acquisition type to Envelope or Peak Detect, the oscilloscope acquires minimum and maximum waveforms. To retrieve the minimum and maximum waveforms, you should use the tkdpo4k_ReadMinMaxWaveform and tkdpo4k_FetchMinMaxWaveform functions.</Description>
            </Method>
            <Method>
               <Name>configurefastacquisition</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefastacquisition(obj, WaveformGrading, FastAcqusitionEnable)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureFastAcquisition', session, WaveformGrading, FastAcqusitionEnable);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the fast acquisition mode.</Description>
            </Method>
            <Method>
               <Name>configuremagnivuenabled</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremagnivuenabled(obj, MagnivuEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMagnivuEnabled', session, MagnivuEnabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function enables or disables the MagniVu feature, which provides up to 32 times signal detail for fast viewing of short events. This feature is not recommended for slow data formats such as RS232.

Notes:
(1) This function is valid only in MSO models.</Description>
            </Method>
            <Method>
               <Name>configurenumaverages</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurenumaverages(obj, NumberofAverages)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureNumAverages', session, NumberofAverages);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the number of waveforms that the oscilloscope  acquires and averages. After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.  

Note: You must set the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to TKDPO4K_VAL_AVERAGE before you call this function. To set the acquisition type, call the tkdpo4k_ConfigureAcquisitionType function. </Description>
            </Method>
            <Method>
               <Name>configurenumenvelopes</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurenumenvelopes(obj, NumberofEnvelopes)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureNumEnvelopes', session, NumberofEnvelopes);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>When you set the acquisition type to TKDPO4K_VAL_ENVELOPE, the oscilloscope acquires multiple waveforms. After each waveform acquisition, the oscilloscope keeps the minimum and maximum values it finds for each element in the waveform record. This function configures the number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms.

After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.

Notes: 

1.Set the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to TKDPO4K_VAL_ENVELOPE before you call this function. To set the acquisition type, call the tkdpo4k_ConfigureAcquisitionType function. 

2.The number of envelopes can be set from 1 to 2000 in increments of 1, or to INFInite. Setting the value to a number greater than 2000 sets the number of envelopes to INFInite.</Description>
            </Method>
            <Method>
               <Name>samplemode</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SampleMode] = samplemode(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SampleMode = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_SampleMode', session, SampleMode);

SampleMode = double(SampleMode.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the current sample mode of the oscilloscope.</Description>
            </Method>
            <Method>
               <Name>samplerate</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SampleRate] = samplerate(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SampleRate = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_SampleRate', session, SampleRate);

SampleRate = double(SampleRate.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the current sample rate of the oscilloscope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSBasicBUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSBasicBUS1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurebusstate</Name>
               <Location>ConfigurationBUSBasicBUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurebusstate(obj, BusNumber, BUSState)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureBUSState', session, BusNumber, BUSState);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the BUS state. </Description>
            </Method>
            <Method>
               <Name>configurebustype</Name>
               <Location>ConfigurationBUSBasicBUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurebustype(obj, BusNumber, BUSType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureBUSType', session, BusNumber, BUSType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the BUS type that the oscilloscope uses to apply to the specified BUS.

Note: Call this function before using serial triggering.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSCANBUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSCANBUS1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurecan</Name>
               <Location>ConfigurationBUSCANBUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecan(obj, BusNumber, BitRate, ProbeType, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureCAN', session, BusNumber, BitRate, ProbeType, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures common CAN attributes for the specified BUS. The attributes include Bit Rate, Probe Type, and Source.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSEthernetBus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSEthernetBus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureethernet</Name>
               <Location>ConfigurationBUSEthernetBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernet(obj, BusNumber, EthernetType, ProbeType, DifferentialInputDataSource, tempEthernentDDataSource, EthernentDDataSource, EthernetProtocol)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureEthernet', session, BusNumber, EthernetType, ProbeType, DifferentialInputDataSource, tempEthernentDDataSource, EthernentDDataSource, EthernetProtocol);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures ethernet settings for an oscilloscope. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSI2CBUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSI2CBUS1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurei2c</Name>
               <Location>ConfigurationBUSI2CBUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurei2c(obj, BusNumber, ClockSource, DataSource)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureI2C', session, BusNumber, ClockSource, DataSource);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures common I2C attributes for the specified BUS. The attributes include I2C Clock Source, I2C Clock Polarity, and I2C Data Source.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSParallelBus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSParallelBus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureparallel</Name>
               <Location>ConfigurationBUSParallelBus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureparallel(obj, BusNumber, BitsSource, ClockSource, ClockEdge, ClockLocked, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
BitsSource = [double(BitsSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureParallel', session, BusNumber, BitsSource, ClockSource, ClockEdge, ClockLocked, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures scope for Parallel Trigger.

Notes:
(1) This function is valid only in MSO models.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSRS232BUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSRS232BUS1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurers232</Name>
               <Location>ConfigurationBUSRS232BUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurers232(obj, BusNumber, BitRatebps, DataBits, Delimiter, Parity, RXSource, TXSource)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRS232', session, BusNumber, BitRatebps, DataBits, Delimiter, Parity, RXSource, TXSource);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures scope for RS232 Trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationBUSSPIBUS</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBUSSPIBUS1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurespi</Name>
               <Location>ConfigurationBUSSPIBUS</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurespi(obj, BusNumber, SCLKSource, SCLKPolarity, SSSource, SSPolarity, MOSISource, MOSIPolarity, MISOSource, MISOPolarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureSPI', session, BusNumber, SCLKSource, SCLKPolarity, SSSource, SSPolarity, MOSISource, MOSIPolarity, MISOSource, MISOPolarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures common SPI attributes for the specified BUS. The attributes include SCLK Source, SCLK Polarity, SS Source, SS Polarity, MOSI Source, MOSI Polarity, MISO Source, and MISO Polarity.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>autoprobesensevalue</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AutoProbeSenseValue] = autoprobesensevalue(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AutoProbeSenseValue = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_AutoProbeSenseValue', session, ChannelName, AutoProbeSenseValue);

AutoProbeSenseValue = double(AutoProbeSenseValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>The function returns the probe attenuation value the oscilloscope senses. You enable the automatic probe sense capability by setting the Probe Attenuation parameter of the tkdpo4k_ConfigureChannel function to TKDPO4K_VAL_PROBE_SENSE_ON.  

Note: If you disable the automatic probe sense capability, this function returns the manual probe attenuation setting.</Description>
            </Method>
            <Method>
               <Name>configurebusthreshold</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Status] = configurebusthreshold(obj, ChannelName, UpperThreshold, LowerThreshold)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
Status = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_ConfigureBusThreshold', session, ChannelName, UpperThreshold, LowerThreshold, Status);

Status = double(Status.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the bus thresholds settings. 

Note:
This function only applies to DPO/MSO 4kB models.</Description>
            </Method>
            <Method>
               <Name>configurechancharacteristics</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechancharacteristics(obj, ChannelName, InputImpedanceohms, MaximumInputFrequencyhertz)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureChanCharacteristics', session, ChannelName, InputImpedanceohms, MaximumInputFrequencyhertz);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the attributes that control the electrical characteristics of the channel. These attributes are the input impedance and the maximum input frequency.</Description>
            </Method>
            <Method>
               <Name>configurechannel</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechannel(obj, ChannelName, VerticalRange, VerticalOffset, VerticalCoupling, ProbeAttenuation, ChannelEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureChannel', session, ChannelName, VerticalRange, VerticalOffset, VerticalCoupling, ProbeAttenuation, ChannelEnabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes of the channel subsystem for a particular channel. These attributes are the vertical range, vertical offset, coupling, probe attenuation, and channel enabled.</Description>
            </Method>
            <Method>
               <Name>configuredigitalchannel</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigitalchannel(obj, ChannelName, Threshold, ChannelEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureDigitalChannel', session, ChannelName, Threshold, ChannelEnabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the status and threshold of digital channels.

Notes:
(1) This function is valid only in MSO models.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationMathChannels</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationMathChannels1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuremathchannel</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremathchannel(obj, MathSource1, MathFunction, MathSource2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMathChannel', session, MathSource1, MathFunction, MathSource2);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures a math channel for standard waveform math operations. These operations are inverting, adding, subtracting, multiplying, dividing, integrating, and taking a derivative.

Note: To configure a math channel to calculate an FFT, use the tkdpo4k_ConfigureMathChannelFFT function.</Description>
            </Method>
            <Method>
               <Name>configuremathchanneladvanced</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremathchanneladvanced(obj, VAR1, VAR2, FunctionDefinition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FunctionDefinition = [double(FunctionDefinition) 0];

status = calllib(libname, 'tkdpo4k_ConfigureMathChannelAdvanced', session, VAR1, VAR2, FunctionDefinition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures a math channel in the advanced mode. You can define function expression and add variables to the expression in the advanced mode.</Description>
            </Method>
            <Method>
               <Name>configuremathchannelfft</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremathchannelfft(obj, MathSource1, FFTWindow, VertScale)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMathChannelFFT', session, MathSource1, FFTWindow, VertScale);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures a math channel to calculate an FFT.</Description>
            </Method>
            <Method>
               <Name>configuremathchannelspectrum</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremathchannelspectrum(obj, MathRFSource1, MathRFSource2, MathFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMathChannelSpectrum', session, MathRFSource1, MathRFSource2, MathFunction);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures a math channel to perform math operations on RF Channels.

Note:
 This function applies only to MDO series oscilloscopes</Description>
            </Method>
            <Method>
               <Name>configuremathexpdisplay</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremathexpdisplay(obj, AutoScale)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMathExpDisplay', session, AutoScale);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the display of the math expression.

Note: 
The Math auto-scale function affects the vertical scaling of the waveform. With auto-scaling off and scale set too low on queried waveform data, it is possible the waveform may be clipped (positive and/or negative) resulting in an over/under range for the data in the CURVE query result.</Description>
            </Method>
            <Method>
               <Name>enablemathchannel</Name>
               <Location>ConfigurationMathChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function enablemathchannel(obj, Enable)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_EnableMathChannel', session, Enable);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures whether display the math channel on the oscilloscope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureinitiatecontinuous</Name>
               <Location>ConfigurationMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinitiatecontinuous(obj, ContinuousAcquisition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureInitiateContinuous', session, ContinuousAcquisition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the oscilloscope to perform a continuous acquisition. </Description>
            </Method>
            <Method>
               <Name>configuremeasurement</Name>
               <Location>ConfigurationMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremeasurement(obj, ReferenceLevelCalcMethod, Gating)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMeasurement', session, ReferenceLevelCalcMethod, Gating);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the method the oscilloscope uses to calculate the measurement reference levels and controls the gating method for measurements.</Description>
            </Method>
            <Method>
               <Name>configuremidref</Name>
               <Location>ConfigurationMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremidref(obj, MidRefpercentage)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureMidRef', session, MidRefpercentage);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures an immediate delay measurement.


</Description>
            </Method>
            <Method>
               <Name>configurereflevels</Name>
               <Location>ConfigurationMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurereflevels(obj, LowRefpercentage, MidRefpercentage, HighRefpercentage)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRefLevels', session, LowRefpercentage, MidRefpercentage, HighRefpercentage);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the reference levels for waveform measurements.  

Note: You must call this function before you call the tkdpo4k_ReadWaveformMeasurement or tkdpo4k_FetchWaveformMeasurement functions to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationReferenceChannels</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationReferenceChannels1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>enablereferencechannel</Name>
               <Location>ConfigurationReferenceChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function enablereferencechannel(obj, ChannelName, Enable)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_EnableReferenceChannel', session, ChannelName, Enable);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function enables or disables a reference channel.

Notes:

(1) You can enable a reference channel only after you store a waveform to the reference channel. Use the  tkdpo4k_StoreWfmToRefChannel functions to store a waveform to a reference channel.

(2) Disabling a reference channel does not clear the waveform that you stored in that reference channel.</Description>
            </Method>
            <Method>
               <Name>storewfmtorefchannel</Name>
               <Location>ConfigurationReferenceChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function storewfmtorefchannel(obj, WaveformSource, ReferenceChannel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
WaveformSource = [double(WaveformSource) 0];
ReferenceChannel = [double(ReferenceChannel) 0];

status = calllib(libname, 'tkdpo4k_StoreWfmToRefChannel', session, WaveformSource, ReferenceChannel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function stores a waveform in a reference channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationRFChannels</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationRFChannels1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearspectrogram</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearspectrogram(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ClearSpectrogram', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the spectrogram.

SCPI Command:
:RF:SPECTRogram CLEAR</Description>
            </Method>
            <Method>
               <Name>configurerfdetection</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfdetection(obj, EnableAutoDetectionMode, RFChannel, DetectionMethod)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RFChannel = [double(RFChannel) 0];

status = calllib(libname, 'tkdpo4k_ConfigureRFDetection', session, EnableAutoDetectionMode, RFChannel, DetectionMethod);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures attributes of RF Detection function.
Includes: TKDPO4K_ATTR_RF_DETECTION_MODE and TKDPO4K_ATTR_RF_DETECTION_METHOD.

This function only available for MDO models.</Description>
            </Method>
            <Method>
               <Name>configurerfmeasurement</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfmeasurement(obj, MeasureType, ChannelBandwidth, ACPRAdjacentPairCount, ACPRChannelSpacing, OBWPowerPercentage)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFMeasurement', session, MeasureType, ChannelBandwidth, ACPRAdjacentPairCount, ACPRChannelSpacing, OBWPowerPercentage);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures automatic measurements in the frequency domain for RF channels.

Change following attributes:
TKDPO4K_ATTR_RF_MEASURE_TYPE, TKDPO4K_ATTR_RF_MEASURE_ACPR_ADJACENTPAIRS, TKDPO4K_ATTR_RF_MEASURE_ACPR_CHANNEL_SPACING, TKDPO4K_ATTR_RF_MEASURE_CHANNEL_BANDWIDTH, and TKDPO4K_ATTR_RF_MEASURE_OBW_PERCENT_DOWN.

This function only available for MDO models.</Description>
            </Method>
            <Method>
               <Name>configurerfnumaverages</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfnumaverages(obj, NumberofAverages)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFNumAverages', session, NumberofAverages);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the number of acquisitions to be used when creating the RF Average frequency domain trace.

This function only available for MDO models.</Description>
            </Method>
            <Method>
               <Name>configurerfphasetrace</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfphasetrace(obj, PhaseInDegrees, DegreesNumber, EnablePhaseWrap)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFPhaseTrace', session, PhaseInDegrees, DegreesNumber, EnablePhaseWrap);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the RF Phase vs. Time trace.

Note:
This function only available for MDO models.</Description>
            </Method>
            <Method>
               <Name>configurerfrbw</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfrbw(obj, SpanBandwidthRatio, AutoResolution, ManualResolution, ManualReference, AutoReference)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFRbw', session, SpanBandwidthRatio, AutoResolution, ManualResolution, ManualReference, AutoReference);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the Window function, Span:Bandwidth Ratio and Resolution Bandwidth for MDO Series Oscilloscopes.

Note:
 This function is only applicable to MDO series oscilloscopes.</Description>
            </Method>
            <Method>
               <Name>configurerfspectrum</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfspectrum(obj, SpectrumMode, FrequencySettingMode, CenterFrequency, SpanFrequency, StartFrequency, StopFrequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFSpectrum', session, SpectrumMode, FrequencySettingMode, CenterFrequency, SpanFrequency, StartFrequency, StopFrequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configure the Spectrum attributes for RF Channel.
Includes: TKDPO4K_ATTR_RF_SPECTRUM_MODE, TKDPO4K_ATTR_RF_FREQ_START and TKDPO4K_ATTR_RF_FREQ_STOP.

This function only available for MDO models.</Description>
            </Method>
            <Method>
               <Name>configurerfsquelch</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerfsquelch(obj, EnableSquelch, SquelchThreshold)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRFSquelch', session, EnableSquelch, SquelchThreshold);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the squelch function.
When squelch is on, only the portions of these
traces where the amplitude exceeds the squelch threshold are displayed. This prevents the display of Phase and/or Frequency for signals that are at or near noise levels.

Note:
 This function is only applicable to MDO series Oscilloscopes.</Description>
            </Method>
            <Method>
               <Name>configuretimedomainwinfunc</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretimedomainwinfunc(obj, RFWindowFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTimeDomainWinFunc', session, RFWindowFunction);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures windowing function, which is only used for the three time domain RF traces (RF Amplitude vs. Time, RF Frequency vs. Time and RF Phase vs. Time). The windowing function is a Fast Fourier Transform (FFT) technique used to minimize the discontinuities between successive frames of an RF time domain signal.</Description>
            </Method>
            <Method>
               <Name>enablerfchannel</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function enablerfchannel(obj, ChannelName, Enable)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_EnableRFChannel', session, ChannelName, Enable);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function enables or disables a reference channel.

Note:
 This function is only applicable to MDO series Oscilloscopes.</Description>
            </Method>
            <Method>
               <Name>resetspectrumtraces</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetspectrumtraces(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ResetSpectrumTraces', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function resets the spectrum traces, RF_MINHold, RF_MAXHold and RF_AVErage.

SCPI Command:
:RF:SPECTRUMTrace RESET</Description>
            </Method>
            <Method>
               <Name>setrfiqdatafileformat</Name>
               <Location>ConfigurationRFChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setrfiqdatafileformat(obj, FileFormat)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_SetRFIQDataFileFormat', session, FileFormat);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function specifies the file format for saving the RF baseband I &amp; Q data.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationSetGetCheckAttributeCheckAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationSetGetCheckAttributeCheckAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>checkattributeviboolean</Name>
               <Location>ConfigurationSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributeviboolean(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_CheckAttributeViBoolean', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function checks the validity of a value you specify for a ViBoolean attribute.</Description>
            </Method>
            <Method>
               <Name>checkattributeviint32</Name>
               <Location>ConfigurationSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributeviint32(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_CheckAttributeViInt32', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function checks the validity of a value you specify for a ViInt32 attribute.</Description>
            </Method>
            <Method>
               <Name>checkattributevireal64</Name>
               <Location>ConfigurationSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevireal64(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_CheckAttributeViReal64', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function checks the validity of a value you specify for a ViReal64 attribute.</Description>
            </Method>
            <Method>
               <Name>checkattributevisession</Name>
               <Location>ConfigurationSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevisession(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_CheckAttributeViSession', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function checks the validity of a value you specify for a ViSession attribute.</Description>
            </Method>
            <Method>
               <Name>checkattributevistring</Name>
               <Location>ConfigurationSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevistring(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = [double(AttributeValue) 0];

status = calllib(libname, 'tkdpo4k_CheckAttributeViString', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function checks the validity of a value you specify for a ViString attribute.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationSetGetCheckAttributeGetAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationSetGetCheckAttributeGetAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getattributeviboolean</Name>
               <Location>ConfigurationSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviboolean(obj, ChannelName, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = libpointer('uint16Ptr', 0);

status = calllib(libname, 'tkdpo4k_GetAttributeViBoolean', session, ChannelName, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function queries the value of a ViBoolean attribute.

You can use this function to get the values of instrument- specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid. </Description>
            </Method>
            <Method>
               <Name>getattributeviint32</Name>
               <Location>ConfigurationSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint32(obj, ChannelName, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_GetAttributeViInt32', session, ChannelName, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function queries the value of a ViInt32 attribute.

You can use this function to get the values of instrument- specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid.</Description>
            </Method>
            <Method>
               <Name>getattributevireal64</Name>
               <Location>ConfigurationSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevireal64(obj, ChannelName, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_GetAttributeViReal64', session, ChannelName, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function queries the value of a ViReal64 attribute.

You can use this function to get the values of instrument- specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid.</Description>
            </Method>
            <Method>
               <Name>getattributevisession</Name>
               <Location>ConfigurationSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevisession(obj, ChannelName, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = libpointer('uint32Ptr', 0);

status = calllib(libname, 'tkdpo4k_GetAttributeViSession', session, ChannelName, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function queries the value of a ViSession attribute.

You can use this function to get the values of instrument- specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid.</Description>
            </Method>
            <Method>
               <Name>getattributevistring</Name>
               <Location>ConfigurationSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevistring(obj, ChannelName, AttributeID, ArraySize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_GetAttributeViString', session, ChannelName, AttributeID, ArraySize, AttributeValue);

AttributeValue = strtrim(char(AttributeValue.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function queries the value of a ViString attribute.

You can use this function to get the values of instrument- specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid. 

You must provide a ViChar array to serve as a buffer for the value. You pass the number of bytes in the buffer as the Array Size parameter. If the current value of the attribute, including the terminating NUL byte, is larger than the size you indicate in the Array Size parameter, the function copies Array Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Array Size is 4, the function places 123 into the buffer and returns 7.

If you want to call this function just to get the required buffer size, you can pass 0 for the Array Size and VI_NULL for the Attribute Value buffer.  

If you want the function to fill in the buffer regardless of the   number of bytes in the value, pass a negative number for the Array Size parameter.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationSetGetCheckAttributeSetAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationSetGetCheckAttributeSetAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>setattributeviboolean</Name>
               <Location>ConfigurationSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviboolean(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_SetAttributeViBoolean', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the value of a ViBoolean attribute.

This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid or is different than the value you specify. 

This instrument driver contains high-level functions that set most of the instrument attributes. It is best to use the high-level driver functions as much as possible. They handle order dependencies and multithread locking for you. In addition, they perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call.

Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O.</Description>
            </Method>
            <Method>
               <Name>setattributeviint32</Name>
               <Location>ConfigurationSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint32(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_SetAttributeViInt32', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the value of a ViInt32 attribute.

This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid or is different than the value you specify. 

This instrument driver contains high-level functions that set most of the instrument attributes. It is best to use the high-level driver functions as much as possible. They handle order dependencies and multithread locking for you. In addition, they perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call.

Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O.</Description>
            </Method>
            <Method>
               <Name>setattributevireal64</Name>
               <Location>ConfigurationSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevireal64(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_SetAttributeViReal64', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the value of a ViReal64 attribute.

This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid or is different than the value you specify. 

This instrument driver contains high-level functions that set most of the instrument attributes. It is best to use the high-level driver functions as much as possible. They handle order dependencies and multithread locking for you. In addition, they perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call.

Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O.</Description>
            </Method>
            <Method>
               <Name>setattributevisession</Name>
               <Location>ConfigurationSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevisession(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_SetAttributeViSession', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the value of a ViSession attribute.

This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid or is different than the value you specify. 

This instrument driver contains high-level functions that set most of the instrument attributes. It is best to use the high-level driver functions as much as possible. They handle order dependencies and multithread locking for you. In addition, they perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call.

Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O.</Description>
            </Method>
            <Method>
               <Name>setattributevistring</Name>
               <Location>ConfigurationSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevistring(obj, ChannelName, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AttributeValue = [double(AttributeValue) 0];

status = calllib(libname, 'tkdpo4k_SetAttributeViString', session, ChannelName, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the value of a ViString attribute.

This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:

- State caching is disabled for the entire session or for the particular attribute.

- State caching is enabled and the currently cached value is invalid or is different than the value you specify. 

This instrument driver contains high-level functions that set most of the instrument attributes. It is best to use the high-level driver functions as much as possible. They handle order dependencies and multithread locking for you. In addition, they perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call.

Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerBasicTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerBasicTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureauxintriggerlevel</Name>
               <Location>ConfigurationTriggerBasicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureauxintriggerlevel(obj, TriggerLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureAuxInTriggerLevel', session, TriggerLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the threshold voltage level when triggering on the auxiliary input waveform.

Note:

This function is not available for MDO Series oscilloscope models.</Description>
            </Method>
            <Method>
               <Name>configuretrigger</Name>
               <Location>ConfigurationTriggerBasicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigger(obj, TriggerType, TriggerHoldoffsec)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTrigger', session, TriggerType, TriggerHoldoffsec);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes of the trigger subsystem. These attributes are the trigger type and holdoff.

When you call tkdpo4k_ReadWaveform, tkdpo4k_ReadWaveformMeasurement, tkdpo4k_ReadMinMaxWaveform, or tkdpo4k_InitiateAcquisition, the oscilloscope waits for a trigger. You specify the type of trigger for which the oscilloscope waits with the Trigger Type parameter.  

If the oscilloscope requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the Holdoff parameter to elapse since the previous trigger. The oscilloscope then waits for the next trigger. Once the oscilloscope acquires a complete waveform, it returns to the Idle state.

Note: After you call this function, you must call the trigger configuration function that corresponds to the Trigger Type you select to completely specify the trigger. For example, if you set the Trigger Type to TKDPO4K_VAL_EDGE_TRIGGER, you use the tkdpo4k_ConfigureEdgeTriggerSource function to completely specify the trigger.</Description>
            </Method>
            <Method>
               <Name>configuretriggercoupling</Name>
               <Location>ConfigurationTriggerBasicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggercoupling(obj, TriggerCoupling)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTriggerCoupling', session, TriggerCoupling);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the trigger coupling on the instrument.</Description>
            </Method>
            <Method>
               <Name>configuretriggerlevel</Name>
               <Location>ConfigurationTriggerBasicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerlevel(obj, ChannelName, Level)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureTriggerLevel', session, ChannelName, Level);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the trigger level for a specified channel. The instrument can have different trigger levels for each channel (CH1~CH4 for four-channel modules, and CH1~CH2 for two-channel modules, and D0~D15 are also valid for MSO/MDO models). The oscilloscope uses the trigger level of the channel specified as trigger source.

For example, if you specify channel 1 as the trigger source, and the trigger level for channel 1 is 2 volts, the voltage threshold for trigger is 2 volts.


Note:

ECL sets the threshold level to a preset ECL high level of -1.3V.
TTL sets the threshold level to a preset TTL high level of 1.4V.</Description>
            </Method>
            <Method>
               <Name>configuretriggermodifier</Name>
               <Location>ConfigurationTriggerBasicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggermodifier(obj, TriggerModifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTriggerModifier', session, TriggerModifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the oscilloscope trigger modifier.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerDelayTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerDelayTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuredelaytriggerevents</Name>
               <Location>ConfigurationTriggerDelayTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredelaytriggerevents(obj, Events)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureDelayTriggerEvents', session, Events);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the number of main trigger events that occur after the main trigger and before the oscilloscope looks for the delay trigger event when you specify the delay trigger mode to Trigger After Events.</Description>
            </Method>
            <Method>
               <Name>configuredelaytriggermode</Name>
               <Location>ConfigurationTriggerDelayTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredelaytriggermode(obj, Mode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureDelayTriggerMode', session, Mode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures how the delay edge trigger waits for the trigger event.

If you specify the oscilloscope to trigger after time, after receiving the main trigger, the oscilloscope waits the length of time you specify with the TKDPO4K_ATTR_ACQUISITION_START_TIME attribute before it starts looking for a trigger from the delay trigger source. You set the TKDPO4K_ATTR_ACQUISITION_START_TIME attribute by calling the tkdpo4k_ConfigureDelayTriggerTime function.

If you specify the oscilloscope to trigger after events, after receiving the main trigger, the oscilloscope waits the number of trigger events you specify with the TKDPO4K_ATTR_DALEY_TRIGGER_EVENTS attribute before it starts acquiring data. You set the TKEPO4K_ATTR_DELAY_TRIGGER_EVENTS attribute by calling the tkdpo4k_ConfigureDelayTriggerEvents function.

You should call tkdpo4k_ConfigureDelayTriggerTime or tkdpo4k_ConfigureDelayTriggerEvents function before using this function to specify the trigger mode.</Description>
            </Method>
            <Method>
               <Name>configuredelaytriggersource</Name>
               <Location>ConfigurationTriggerDelayTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredelaytriggersource(obj, Source, TriggerCoupling, Level, TriggerSlope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'tkdpo4k_ConfigureDelayTriggerSource', session, Source, TriggerCoupling, Level, TriggerSlope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the delay edge trigger. An delay edge trigger occurs after the main trigger event, when the trigger signal passes through the voltage threshold that you specify with the Trigger Level parameter and has the slope that you specify with the Trigger Slope parameter.
Requires the Trigger Type to be EDGE.</Description>
            </Method>
            <Method>
               <Name>configuredelaytriggertime</Name>
               <Location>ConfigurationTriggerDelayTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredelaytriggertime(obj, Time)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureDelayTriggerTime', session, Time);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the time period delayed after the main
trigger and before the oscilloscope looks the delay trigger event when you specify the delay trigger mode to Trigger After Time.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerEdgeTriggerGroupACLineTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerEdgeTriggerGroupACLineTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureaclinetriggerslope</Name>
               <Location>ConfigurationTriggerEdgeTriggerGroupACLineTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaclinetriggerslope(obj, ACLineSlope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureAcLineTriggerSlope', session, ACLineSlope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the oscilloscope for AC Line triggering.

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_AC_LINE_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerEdgeTriggerGroupEdgeTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerEdgeTriggerGroupEdgeTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureedgetriggersource</Name>
               <Location>ConfigurationTriggerEdgeTriggerGroupEdgeTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureedgetriggersource(obj, TriggerSource, TriggerLevelvolts, TriggerSlope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEdgeTriggerSource', session, TriggerSource, TriggerLevelvolts, TriggerSlope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the edge trigger. An edge trigger occurs when the trigger signal passes through the voltage threshold that you specify with the Trigger Level parameter and has the slope that you specify with the Trigger Slope parameter.  

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_EDGE_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerEthernetTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerEthernetTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureethernettriggerbasic</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggerbasic(obj, BusNumber, FrameType, Condition, Qualifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerBasic', session, BusNumber, FrameType, Condition, Qualifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures  Ethernet trigger basic settings.

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
            <Method>
               <Name>configureethernettriggerdata</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggerdata(obj, BusNumber, Size, Offset, UpperLimit, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
UpperLimit = [double(UpperLimit) 0];
Data = [double(Data) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerData', session, BusNumber, Size, Offset, UpperLimit, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures data trigger settings for Ethernet trigger. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
            <Method>
               <Name>configureethernettriggeriph</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggeriph(obj, BusNumber, SourceAddress, DestinationAddress, Protocol)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SourceAddress = [double(SourceAddress) 0];
DestinationAddress = [double(DestinationAddress) 0];
Protocol = [double(Protocol) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerIPH', session, BusNumber, SourceAddress, DestinationAddress, Protocol);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures IP header trigger settings for Ethernet trigger. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
            <Method>
               <Name>configureethernettriggermac</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggermac(obj, BusNumber, SourceAddress, DestinationAddress, UpperLength, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SourceAddress = [double(SourceAddress) 0];
DestinationAddress = [double(DestinationAddress) 0];
UpperLength = [double(UpperLength) 0];
Length = [double(Length) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerMAC', session, BusNumber, SourceAddress, DestinationAddress, UpperLength, Length);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures MAC trigger settings for Ethernet trigger. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
            <Method>
               <Name>configureethernettriggerqtag</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggerqtag(obj, BusNumber, QTAGValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
QTAGValue = [double(QTAGValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerQTAG', session, BusNumber, QTAGValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures QTAG trigger settings for Ethernet trigger. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
            <Method>
               <Name>configureethernettriggertcph</Name>
               <Location>ConfigurationTriggerEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureethernettriggertcph(obj, BusNumber, SourceAddress, DestinationAddress, SequenceNumber, AcknowledgeNumber)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SourceAddress = [double(SourceAddress) 0];
DestinationAddress = [double(DestinationAddress) 0];
SequenceNumber = [double(SequenceNumber) 0];
AcknowledgeNumber = [double(AcknowledgeNumber) 0];

status = calllib(libname, 'tkdpo4k_ConfigureEthernetTriggerTCPH', session, BusNumber, SourceAddress, DestinationAddress, SequenceNumber, AcknowledgeNumber);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures TCP header trigger settings for Ethernet trigger. 

This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerLogicTriggerGroup</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerLogicTriggerGroup1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurelogictriggerthreshold</Name>
               <Location>ConfigurationTriggerLogicTriggerGroup</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurelogictriggerthreshold(obj, ChannelName, LogicThreshold)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureLogicTriggerThreshold', session, ChannelName, LogicThreshold);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures trigger thresholds for a specified channel. The instrument can have different trigger thresholds for each channel (CH1~CH4 for four-channel modules, CH1~CH2 for two-channel modules). The oscilloscope uses trigger thresholds of the channel specified as the trigger source.

For example, if you specify channel 1 as the trigger source, and the logic threshold for channel 1 is 1 volt, then the logic threshold for triggering is 1 volt.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerLogicTriggerGroupPatternTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerLogicTriggerGroupPatternTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurepatterntrigger</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterntrigger(obj, Function, DeltaTime, Condition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigurePatternTrigger', session, Function, DeltaTime, Condition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the scope to trigger according to a pattern as defined by the function and holds true for the delta time.

Note: Before reading waveform, set input channels using tkds30xx_ConfigureLogicTriggerInputs.
</Description>
            </Method>
            <Method>
               <Name>configurepatterntriggerinput</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterntriggerinput(obj, ChannelName, LogicInput)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigurePatternTriggerInput', session, ChannelName, LogicInput);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the pattern trigger input for a specified channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerLogicTriggerGroupSetHoldTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerLogicTriggerGroupSetHoldTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuresetholdtriggersource</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresetholdtriggersource(obj, DataSource, ClockSource, ClockEdge, SetTime, HoldTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureSetholdTriggerSource', session, DataSource, ClockSource, ClockEdge, SetTime, HoldTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes for sethold triggering. A sethold trigger occurs when a setup and hold violation happens. The sethold attributes include Data Source, Clock Source, Clock Edge, Set Time, and Hold Time.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerLogicTriggerGroupStateTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerLogicTriggerGroupStateTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurestatetrigger</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurestatetrigger(obj, Function)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureStateTrigger', session, Function);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the scope to trigger according to a pattern as defined by the function and holds true for the delta time with a proper clock edge.

Note: Before reading waveform, set input channels using tkds30xx_ConfigureLogicTriggerInputs.</Description>
            </Method>
            <Method>
               <Name>configurestatetriggerclockinput</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurestatetriggerclockinput(obj, ClockSource, ClockEdge)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureStateTriggerClockInput', session, ClockSource, ClockEdge);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures clock input attributes for the state trigger of a specified channel. These attributes are the clock source and clock edge. 

Note: You should call this function before tkdpo4k_ConfigureStateTriggerDataInput to allocate a channel for  the clock source.</Description>
            </Method>
            <Method>
               <Name>configurestatetriggerdatainput</Name>
               <Location>ConfigurationTriggerLogicTriggerGroupStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurestatetriggerdatainput(obj, ChannelName, LogicInput)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureStateTriggerDataInput', session, ChannelName, LogicInput);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the state trigger data input for a specified channel. 

Notes:

(1) You must call the tkdpo4k_ConfigureStateTriggerClockInput function before this function to allocate a channel for the clock source.

(2) Do not specify a channel that has been allocated as the clock source in this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerPulseTriggerGroup</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerPulseTriggerGroup1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuretriggerthreshold</Name>
               <Location>ConfigurationTriggerPulseTriggerGroup</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerthreshold(obj, ChannelName, UpperThreshold, LowerThreshold)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'tkdpo4k_ConfigureTriggerThreshold', session, ChannelName, UpperThreshold, LowerThreshold);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures trigger thresholds for a specified channel. The instrument can have different trigger thresholds for each channel (CH1~CH4 for four-channel modules, CH1~CH2 for two-channel modules). The oscilloscope uses a trigger threshold of the channel specified as the trigger source.

For example, if you specify channel 1 as the trigger source, and the upper threshold for channel 1 is 5 volts, the lower threshold for channel 1 is 0 volt, then the upper threshold and lower threshold for triggering is 5 volts and 0 volt.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerPulseTriggerGroupGlitchTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerPulseTriggerGroupGlitchTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureglitchtriggersource</Name>
               <Location>ConfigurationTriggerPulseTriggerGroupGlitchTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureglitchtriggersource(obj, TriggerSource, TriggerLevelvolts, GlitchWidthsec, GlitchPolarity, GlitchCondition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureGlitchTriggerSource', session, TriggerSource, TriggerLevelvolts, GlitchWidthsec, GlitchPolarity, GlitchCondition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the glitch trigger. A glitch trigger occurs when the trigger signal has a pulse with a width that is less than the glitch width. You specify the glitch width in the Glitch Width parameter. You specify the polarity of the pulse with the Glitch Polarity parameter. The trigger does not actually occur until the edge of a pulse that corresponds to the Glitch Width and Glitch Polarity crosses the threshold you specify in the Trigger Level parameter. 

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_GLITCH_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerPulseTriggerGroupRuntTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerPulseTriggerGroupRuntTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurerunttriggercondition</Name>
               <Location>ConfigurationTriggerPulseTriggerGroupRuntTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerunttriggercondition(obj, RuntWidth, RuntCondition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureRuntTriggerCondition', session, RuntWidth, RuntCondition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the runt trigger condition. A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold. You specify the runt with the Runt Width parameter. You specify the runt condition with the Runt Condition parameter.

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_RUNT_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
            <Method>
               <Name>configurerunttriggersource</Name>
               <Location>ConfigurationTriggerPulseTriggerGroupRuntTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerunttriggersource(obj, TriggerSource, RuntLowThresholdvolts, RuntHighThresholdvolts, RuntPolarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureRuntTriggerSource', session, TriggerSource, RuntLowThresholdvolts, RuntHighThresholdvolts, RuntPolarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the runt trigger. A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold. You specify the runt thresholds with the  Runt Low Threshold and Runt High Threshold parameters. You specify the polarity of the runt with the Runt Polarity parameter.

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_RUNT_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerPulseTriggerGroupTransitionTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerPulseTriggerGroupTransitionTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuretransittriggersource</Name>
               <Location>ConfigurationTriggerPulseTriggerGroupTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretransittriggersource(obj, TriggerSource, Polarity, Condition, DeltaTime, LowerThresthold, UpperThreshold)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureTransitTriggerSource', session, TriggerSource, Polarity, Condition, DeltaTime, LowerThresthold, UpperThreshold);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the transition trigger. You specify the polarity of the transition with the Polarity parameter. You specify the condition of the transition with the Condition parameter. You specify the delta time with the Delta Time parameter. You specify the transition thresholds with the Transition Low Threshold and Transition High Threshold parameters.

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TRANSITION_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroup</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroup1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureserialtriggersource</Name>
               <Location>ConfigurationTriggerSerialTriggerGroup</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureserialtriggersource(obj, BusSource)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureSerialTriggerSource', session, BusSource);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the bus source for serial triggering. </Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupCANTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupCANTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurecantrigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecantrigger(obj, BusNumber, Condition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureCANTrigger', session, BusNumber, Condition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes for CAN triggering. The attributes include BUS Number and Trigger Condition.</Description>
            </Method>
            <Method>
               <Name>configurecantriggerdata</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecantriggerdata(obj, BusNumber, DataSize, DataValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DataValue = [double(DataValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureCANTriggerData', session, BusNumber, DataSize, DataValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the CAN data size and data value for the specified BUS. 

Note: You must call this function when you specify the CAN trigger condition to DATA or ID AND DATA.</Description>
            </Method>
            <Method>
               <Name>configurecantriggerframetype</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecantriggerframetype(obj, BusNumber, FrameType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureCANTriggerFrameType', session, BusNumber, FrameType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the frame type for the specified BUS.

Note: You should call this function when you specify the CAN trigger condition to FRAME TYPE.</Description>
            </Method>
            <Method>
               <Name>configurecantriggerid</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecantriggerid(obj, BusNumber, IDMode, IDValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
IDValue = [double(IDValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureCANTriggerID', session, BusNumber, IDMode, IDValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the CAN identifier mode and identifier value for the specified BUS. 

Note: You must call this function when you specify the CAN trigger condition to IDENTIFIER or ID AND DATA.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupI2CTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupI2CTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurei2ctrigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurei2ctrigger(obj, BusNumber, Condition, DataDirection)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureI2CTrigger', session, BusNumber, Condition, DataDirection);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes for I2C triggering. The attributes include BUS Number, Trigger Condition, and Data Direction. </Description>
            </Method>
            <Method>
               <Name>configurei2ctriggeraddress</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurei2ctriggeraddress(obj, BusNumber, AddressMode, AddressValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
AddressValue = [double(AddressValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureI2CTriggerAddress', session, BusNumber, AddressMode, AddressValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the I2C address mode and address value for the specified BUS. 

Note: You must call this function when you specify the I2C trigger condition to ADDRESS or ADD AND DATA.</Description>
            </Method>
            <Method>
               <Name>configurei2ctriggerdata</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurei2ctriggerdata(obj, BusNumber, DataSize, DataValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DataValue = [double(DataValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureI2CTriggerData', session, BusNumber, DataSize, DataValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures data size and data value for the specified BUS.

Note: You must call this function when you specify the I2C trigger condition to DATA or ADD AND DATA.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupParallelTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupParallelTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureparalleltrigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupParallelTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureparalleltrigger(obj, BusNumber, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Value = [double(Value) 0];

status = calllib(libname, 'tkdpo4k_ConfigureParallelTrigger', session, BusNumber, Value);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures scope for parallel trigger.

Notes:
(1) This function is valid only in MSO models.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupRS232Trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupRS232Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurers232trigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurers232trigger(obj, BusNumber, Condition, RXSize, RXValue, TXSize, TXValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RXValue = [double(RXValue) 0];
TXValue = [double(TXValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureRS232Trigger', session, BusNumber, Condition, RXSize, RXValue, TXSize, TXValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures scope for serial RS232 trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupSPITrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupSPITrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurespitrigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupSPITrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurespitrigger(obj, BusNumber, Condition, DataSize, MISOValue, MOSIValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MISOValue = [double(MISOValue) 0];
MOSIValue = [double(MOSIValue) 0];

status = calllib(libname, 'tkdpo4k_ConfigureSPITrigger', session, BusNumber, Condition, DataSize, MISOValue, MOSIValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the common attributes for SPI triggering. The attributes include BUS Number, Trigger Condition, Data Size, MISO Value, and MOSI Value.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerSerialTriggerGroupUSB</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerSerialTriggerGroupUSB1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureusbtrigger</Name>
               <Location>ConfigurationTriggerSerialTriggerGroupUSB</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureusbtrigger(obj, BusNumber, SplitTransactionHubAddress, SplitTransactionPortAddress, tempSplitTransactionStartEnd, SplitTransactionField, SplitTransactionEndoiubt)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SplitTransactionHubAddress = [double(SplitTransactionHubAddress) 0];
SplitTransactionPortAddress = [double(SplitTransactionPortAddress) 0];

status = calllib(libname, 'tkdpo4k_ConfigureUSBTrigger', session, BusNumber, SplitTransactionHubAddress, SplitTransactionPortAddress, tempSplitTransactionStartEnd, SplitTransactionField, SplitTransactionEndoiubt);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures USB trigger settings for an oscilloscope. 

Note:
This function only applies to DPO4034B, DPO4054B, DPO4104B, MSO4034B, MSO4054B, MSO4104B.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTriggerTVTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerTVTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuretvtriggercustom</Name>
               <Location>ConfigurationTriggerTVTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggercustom(obj, Format, ScanRateHz, LinePeriods, SyncIntervals)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTVTriggerCustom', session, Format, ScanRateHz, LinePeriods, SyncIntervals);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures custom format, scan rate, line period and sync interval for TV triggering.

Notes:
(1) This function is valid only when the video format is custom.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggerfieldholdoff</Name>
               <Location>ConfigurationTriggerTVTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggerfieldholdoff(obj, Holdoff)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTVTriggerFieldHoldoff', session, Holdoff);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the video trigger holdoff for TV triggering.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggerhdtv</Name>
               <Location>ConfigurationTriggerTVTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggerhdtv(obj, Format)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTVTriggerHDTV', session, Format);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the HDTV format for TV triggering.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggerlinenumber</Name>
               <Location>ConfigurationTriggerTVTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggerlinenumber(obj, LineNumber)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureTVTriggerLineNumber', session, LineNumber);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the line on which TV trigger is set.

Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TV_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggersource</Name>
               <Location>ConfigurationTriggerTVTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggersource(obj, TriggerSource, TVTriggerSignalFormat, TVEvent, TriggerPolarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'tkdpo4k_ConfigureTVTriggerSource', session, TriggerSource, TVTriggerSignalFormat, TVEvent, TriggerPolarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the TV trigger. You configure the TV trigger source, signal format, the event on which to trigger, and the signal polarity.

Notes: 
1.This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TV_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.

2.HD480P60|HD576P50|HD720P30|HD720P50|HD720P60|HD875I60|HD1080P24|HD1080SF24|HD1080I50|HD1080I60|HD1080P25|HD1080P30|HD1080P50|HD1080P60 set the oscilloscope to trigger on an HDTV videosignal that meets standards defined in the following table. Requires installation of a DPO4VID application module.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>HiddenAttributesnotuserviewable</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HiddenAttributesnotuserviewable1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Auto_Probe_Sense</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This attribute is hidden. The driver uses this attribute internally to enable/disable the automatic probe sense capability of the oscilloscope. The write callback for the TKDPO4K_ATTR_PROBE_ATTENUATION attribute sets the value of this attribute. The read callback for the TKDPO4K_ATTR_PROBE_ATTENUATION attribute reads the value of of this attribute."</Description>
            </Property>
            <Property>
               <Name>Data_Start_Position</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the starting data point for waveform transfer. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>Data_Stop_Position</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the last data point that is transferred when using the CURVE? query. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>Data_Width</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the number of bytes per data point in the waveform transfered using the CURVE command. This attribute is only readable."</Description>
            </Property>
            <Property>
               <Name>Data_Y_Offset</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the vertical position of a waveform. It is a value expressed in waveform data point levels. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>Edge_Trigger_Class</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>7.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Controls the edge trigger setting of the instrument."</Description>
            </Property>
            <Property>
               <Name>Fetch_Buffer_Size</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150149);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150149 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This is a hidden attribute. Specifies the buffer size that the driver uses to fetch waveforms with the tkdpo4k_ReadWaveform, tkdpo4k_FetchWaveform, tkdpo4k_ReadMinMaxWaveformm, and tkdpo4k_FetchMinMaxWaveform functions."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Sampling_Interval</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the interval between samples of the reference waveform specified by the TKDPO4K_ATTR_INPUT_DATA_SOURCE attribute. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>Input_Data_Source</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 0, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This attribute denotes the current channel from which data is read when using the tkdpo4k_FetchWaveform and tkdpo4k_FetchMinMaxWaveform functions. You can use this attribute to check the name of data source."</Description>
            </Property>
            <Property>
               <Name>Logic_Trigger_Class</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1002.0</Value>
                     <Value>1004.0</Value>
                     <Value>1003.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Controls the logic trigger class setting of the instrument."</Description>
            </Property>
            <Property>
               <Name>Main_Trigger_Type</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1010.0</Value>
                     <Value>5.0</Value>
                     <Value>1008.0</Value>
                     <Value>1.0</Value>
                     <Value>1009.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Controls the main trigger setting of the instrument."</Description>
            </Property>
            <Property>
               <Name>Offset_Voltage</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the vertical offset of a waveform. The units are volts. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>OPC_Callback_Timeout</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This attribute is hidden.  The driver uses this attribute internally to set the timeout for the OPC callback. The *OPC operation allows you to synchronize the operation of the oscilloscope with your application program. 

Commands that generate an operation-complete message
--------------------------------------------------------------------------
 Operation                    | Command
--------------------------------------------------------------------------
 Automatic scope adjustment   | AUTOSet EXECute
---------------------------------------------------------------------------
 Internal self-calibration    | *CAL
---------------------------------------------------------------------------
 Single sequence acquisition  | ACQuire:STATE ON or ACQuire:STATE RUN
                              | (when ACQuire:STOPAfter is set to SEQuence)
---------------------------------------------------------------------------
"</Description>
            </Property>
            <Property>
               <Name>Pulse_Trigger_Class</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1001.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute.  Controls the pulse trigger class setting of the instrument."</Description>
            </Property>
            <Property>
               <Name>Serial_Trigger_Class</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1011.0</Value>
                     <Value>1005.0</Value>
                     <Value>1012.0</Value>
                     <Value>1007.0</Value>
                     <Value>1006.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Controls the serial trigger class setting of the instrument."</Description>
            </Property>
            <Property>
               <Name>Time_of_First_Point_in_Waveform</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the position of the first sample of the first sample of the reference waveform specified by the TKDPO4K_ATTR_INPUT_DATA_SOURCE attribute. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>TKDPO4K_ATTR_INSTR_PARALLEL_BIT_SOURCE</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>65.0</Value>
                     <Value>64.0</Value>
                     <Value>63.0</Value>
                     <Value>62.0</Value>
                     <Value>59.0</Value>
                     <Value>61.0</Value>
                     <Value>58.0</Value>
                     <Value>60.0</Value>
                     <Value>57.0</Value>
                     <Value>56.0</Value>
                     <Value>55.0</Value>
                     <Value>54.0</Value>
                     <Value>53.0</Value>
                     <Value>52.0</Value>
                     <Value>51.0</Value>
                     <Value>50.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>TKDPO4K_ATTR_PROBE_GAIN</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>TKDPO4K_ATTR_TOTAL_POINTS</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1000000.0</Value>
                     <Value>5000000.0</Value>
                     <Value>2.0E7</Value>
                     <Value>1.0E7</Value>
                     <Value>100000.0</Value>
                     <Value>10000.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Specifies the actual number of points that the oscilloscope acquires for each channel. "</Description>
            </Property>
            <Property>
               <Name>Vertical_Scale_Factor</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute. Returns the vertical scale factor of the reference waveform specified by the TKDPO4K_ATTR_INPUT_DATA_SOURCE attribute. This attribute is only readable. "</Description>
            </Property>
            <Property>
               <Name>Waveform_Size</Name>
               <Location>HiddenAttributesnotuserviewable</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150150);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a hidden attribute and is used internally by the driver."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesAdvancedSessionInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesAdvancedSessionInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Driver_Setup</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This attribute indicates the Driver Setup string that the user specified when initializing the driver.

Some cases exist where the end-user must specify instrument driver options at initialization time.  An example of this is specifying a particular instrument model from among a family of instruments that the driver supports.  This is useful when using simulation.  The end-user can specify driver-specific options through the DriverSetup keyword in the optionsString parameter to the tkdpo4k_InitWithOptions function, or through the IVI Configuration Utility.

If the user does not specify a Driver Setup string, this attribute returns an empty string.
    "</Description>
            </Property>
            <Property>
               <Name>Logical_Name</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"You may pass a logical name to the tkdpo4k_init or tkdpo4k_InitWithOptions functions.  The IVI configuration file must contain an entry for the logical name.  The logical name entry refers to a virtual instrument section in the configuration file.  The virtual instrument section specifies a physical device and initial user options.  This attribute indicates the logical name you specified when opening the current IVI session.
    "</Description>
            </Property>
            <Property>
               <Name>Resource_Descriptor</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the resource descriptor the driver uses to identify the physical device.
If you initialized the driver with the logical name, this attribute contains the resource descriptor that corresponds to the entry in the IVI configuration.  
If you initialized the instrument driver with the resource descriptor, this attribute contains that value.    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverCapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Class_Group_Capabilities</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050401, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains a comma-separated list of class-extension groups that this driver implements.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Specific_Driver_Class_Specification_Major_Version</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050515);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The major version of the class specification that this driver complies to.    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Class_Specification_Minor_Version</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050516);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The minor version of the class specification that this driver complies to.    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Description</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050514, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Additional information about this instrument driver.    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Revision</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050551, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains additional version information about this instrument driver.
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Vendor</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050513, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The developer of this instrument driver.    "</Description>
            </Property>
            <Property>
               <Name>Supported_Instrument_Models</Name>
               <Location>InherentIVIAttributesDriverInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050327, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Contains a model code of the instrument. For family drivers, this attribute contains a comma-separated list of supported instrument models.     "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesInstrumentInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesInstrumentInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Instrument_Firmware_Revision</Name>
               <Location>InherentIVIAttributesInstrumentInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050510, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the firmware revision of the connected instrument.      "</Description>
            </Property>
            <Property>
               <Name>Instrument_Manufacturer</Name>
               <Location>InherentIVIAttributesInstrumentInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050511, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the name of the instrument manufacturer.    "</Description>
            </Property>
            <Property>
               <Name>Instrument_model</Name>
               <Location>InherentIVIAttributesInstrumentInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050512, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the model code of the connected instrument.     "</Description>
            </Property>
            <Property>
               <Name>Number_of_Channels</Name>
               <Location>InherentIVIAttributesInstrumentInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the number of channels that the specific instrument driver supports.  
    For each attribute for which the IVI_VAL_MULTI_CHANNEL flag attribute is set, the IVI engine maintains a separate cache value for each channel.
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Prefix</Name>
               <Location>InherentIVIAttributesInstrumentInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The prefix for the specific instrument driver.  The name of each user-callable function in this driver starts with this prefix.
    The prefix can be up to a maximum of eight characters.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesUserOptions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesUserOptions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to cache the value of attributes.  When caching is enabled, the instrument driver keeps track of the current instrument settings and avoids sending redundant commands to the instrument.  Thus, you can significantly increase execution speed.
    The instrument driver can choose always to cache or never to cache particular attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use the tkdpo4k_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Interchange_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050021, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to perform interchangeability checking and retrieve interchangeability warnings when you call tkdpo4k_InitiateAcquisition, tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform and tkdpo4k_ReadWaveformMeasurement functions. 

The default value is VI_FALSE.

Interchangeability warnings indicate that using your application with a different instrument might cause different behavior.  You call tkdpo4k_GetNextInterchangeWarning to extract interchange warnings.  Call the tkdpo4k_ClearInterchangeWarnings function to clear the list of interchangeability warnings without reading them.

Interchangeability checking examines the attributes in a capability group only if you specify a value for at least one attribute within that group.  Interchangeability warnings can occur when an attribute affects the behavior of the instrument and you have not set that attribute, or the attribute has been invalidated since you set it.
    "</Description>
            </Property>
            <Property>
               <Name>Query_Instrument_Status</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the instrument driver queries the instrument status after each operation.  Querying the instrument status is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable status checking and maximize performance
    The instrument driver can choose to ignore status checking for particular attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use the tkdpo4k_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Range_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050002, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to validate attribute values and function parameters.  If enabled, the instrument driver validates the parameter values that you pass to driver functions.  Range checking parameters is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable range checking and maximize performance.
    The default value is VI_TRUE.   Use the tkdpo4k_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Record_Value_Coercions</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the IVI engine keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  You call tkdpo4k_GetNextCoercionRecord to extract and delete the oldest coercion record from the list.
    The default value is VI_FALSE.   Use the tkdpo4k_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether or not to simulate instrument driver I/O operations.  If simulation is enabled, instrument driver functions perform range checking and call Ivi_GetAttribute and Ivi_SetAttribute functions, but they do not perform instrument I/O.  For output parameters that represent instrument data, the instrument driver functions return calculated values.
    The default value is VI_FALSE.   Use the tkdpo4k_InitWithOptions function to override this value.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MATH</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MATH1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Advanced_Define</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150131, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150131 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the advanced math function as a text string. You can specify a math expression from waveforms, measurements and scalar sources, functions, operands, and numerical constants. Math expressions can be very complex. As an example, you can enter the expression Log(Ch1+Ch2), which specifies that the signals from channels 1 and 2 are to be algebraically added, and the base 10 log of the sum is to be shown as the final math waveform."</Description>
            </Property>
            <Property>
               <Name>Advanced_VAR1</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150129);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150129 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the value of a user-defined math variable that you can use as part of an advanced math waveform expression. For example, if you specify an advanced math expression as 'CH1*VAR1', and you specify advanced VAR1 as 2, the math channel outputs a waveform calculated by 'CH1*2'."</Description>
            </Property>
            <Property>
               <Name>Advanced_VAR2</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150130);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150130 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the value of a user-defined math variable that you use as part of an advanced math waveform expression. For example, if you specify an advanced math expression as 'CH1*VAR2', and you specify advanced VAR2 as 2, the math channel outputs a waveform calculated by 'CH1*2'."</Description>
            </Property>
            <Property>
               <Name>FFT_Vert_Scale</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150128);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150128 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the FFT math waveform vertical display scale."</Description>
            </Property>
            <Property>
               <Name>FFT_Window</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150127);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150127 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the FFT math waveform window algorithm setting."</Description>
            </Property>
            <Property>
               <Name>Math_Expression_Display</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables or disables the display of the math expression.

SCPI Command:
:MATH:AUTOSCale"</Description>
            </Property>
            <Property>
               <Name>MATH_Function</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150124);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150124 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math function operator that the oscilloscope uses to calculate math channel waveform. This attribute is applicable only when you specify TKDPO4K_VAL_MATH_TYPE_DUAL or TKDPO4K_VAL_MATH_TYPE_FFT to the TKDPO4K_ATTR_MATH_TYPE attribute.

For a unary operator, specify operand by the TKDPO4K_ATTR_MATH_SOURCE_1ST attribute. For a binary operator,specify the first operand by the TKDPO4K_ATTR_MATH_SOURCE_1ST attribute and the second operand by the TKDPO4K_ATTR_MATH_SOURCE_2ND attribute.

If you specify TKDPO4K_VAL_MATH_TYPE_ADVANCED to the TKDPO4K_ATTR_MATH_TYPE attribute, use TKDPO4K_ATTR_ADV_DEFINE, TKDPO4K_ATTR_ADV_VAR1, and TKDPO4K_ATTR_ADV_VAR2 to specify advanced math expression."</Description>
            </Property>
            <Property>
               <Name>MATH_RF_Source_1st</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150235);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150235 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math function operand that the oscilloscope uses to calculate math channel waveform. This attribute is applicable only when you specify TKDPO4K_VAL_MATH_TYPE_SPECTRUM to the TKDPO4K_ATTR_MATH_TYPE attribute."</Description>
            </Property>
            <Property>
               <Name>MATH_RF_Source_2nd</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150236);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150236 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math function operand that the oscilloscope uses to calculate math channel waveform. This attribute is applicable only when you specify TKDPO4K_VAL_MATH_TYPE_SPECTRUM to the TKDPO4K_ATTR_MATH_TYPE attribute."</Description>
            </Property>
            <Property>
               <Name>MATH_Source_1st</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150125);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150125 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>9.0</Value>
                     <Value>8.0</Value>
                     <Value>7.0</Value>
                     <Value>6.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math function operand that the oscilloscope uses to calculate math channel waveform. This attribute is applicable only when you specify TKDPO4K_VAL_MATH_TYPE_DUAL or TKDPO4K_VAL_MATH_TYPE_FFT to the TKDPO4K_ATTR_MATH_TYPE attribute.

If you specify a binary operand to the TKDPO4K_ATTR_MATH_FUNCTION attribute, this attribute specifies the first operand. If you specify a unary operand to the TKDPO4K_ATTR_MATH_FUNCTION attribute, this attribute specifies the unary operand.   "</Description>
            </Property>
            <Property>
               <Name>MATH_Type</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150123);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150123 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math waveform mode type. "</Description>
            </Property>
            <Property>
               <Name>TKDPO4K_ATTR_MATH_SOURCE_2ND</Name>
               <Location>MATH</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150126);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150126 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>9.0</Value>
                     <Value>8.0</Value>
                     <Value>7.0</Value>
                     <Value>6.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the math function operand that the oscilloscope uses to calculate math channel waveform. This attribute is applicable only when you specify TKDPO4K_VAL_MATH_TYPE_DUAL or TKDPO4K_VAL_MATH_TYPE_FFT to the TKDPO4K_ATTR_MATH_TYPE attribute.

If you specify a binary operator to the TKDPO4K_ATTR_MATH_FUNCTION attribute, this attribute specifies the second operand. If you specify a unary operator to the TKDPO4K_ATTR_MATH_FUNCTION attribute, this attribute is not used. "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>MiscellaneousAttributes</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MiscellaneousAttributes1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ID_Query_Response</Name>
               <Location>MiscellaneousAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150001, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the ID Query response string. The instrument driver gets the value of this attribute when you pass VI_TRUE for the ID Query parameter to the tkdpo4k_init or tkdpo4k_InitWithOptions function."</Description>
            </Property>
            <Property>
               <Name>Instrument_Model</Name>
               <Location>MiscellaneousAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150061);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>40.0</Value>
                     <Value>47.0</Value>
                     <Value>36.0</Value>
                     <Value>57.0</Value>
                     <Value>39.0</Value>
                     <Value>23.0</Value>
                     <Value>10.0</Value>
                     <Value>55.0</Value>
                     <Value>22.0</Value>
                     <Value>35.0</Value>
                     <Value>34.0</Value>
                     <Value>12.0</Value>
                     <Value>52.0</Value>
                     <Value>13.0</Value>
                     <Value>51.0</Value>
                     <Value>54.0</Value>
                     <Value>53.0</Value>
                     <Value>61.0</Value>
                     <Value>1.0</Value>
                     <Value>60.0</Value>
                     <Value>46.0</Value>
                     <Value>25.0</Value>
                     <Value>50.0</Value>
                     <Value>24.0</Value>
                     <Value>31.0</Value>
                     <Value>59.0</Value>
                     <Value>30.0</Value>
                     <Value>3.0</Value>
                     <Value>49.0</Value>
                     <Value>58.0</Value>
                     <Value>4.0</Value>
                     <Value>11.0</Value>
                     <Value>56.0</Value>
                     <Value>48.0</Value>
                     <Value>21.0</Value>
                     <Value>20.0</Value>
                     <Value>42.0</Value>
                     <Value>38.0</Value>
                     <Value>44.0</Value>
                     <Value>37.0</Value>
                     <Value>43.0</Value>
                     <Value>33.0</Value>
                     <Value>45.0</Value>
                     <Value>32.0</Value>
                     <Value>41.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the oscilloscope model that is currently in use. This information is read from the instrument when the session is initialized. The models that this driver supports are listed in the range table."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>RFChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="RFChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>RF_Channel_Average_Trace_Count</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150240);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the number of RF traces that have been accumulated to create
the RF Average frequency domain trace.
The range is from 0 to the value of TKDPO4K_ATTR_RF_NUM_AVERAGES attribute"</Description>
            </Property>
            <Property>
               <Name>RF_Channel_Bandwidth</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150257);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150257 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Configures the measurement bandwidth to use for the Main channel, as well as the adjacent side channels, when performing ACPR measurements using a frequency domain trace.
Specifies the Analysis Bandwidth to use, when the RF measurement type has been set to OBW.
Specifies the channel bandwidth to use when the RF measurement type has been set to Channel Power (CP)."</Description>
            </Property>
            <Property>
               <Name>RF_Channel_Power</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150258);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The total channel power within the channel bandwidth."</Description>
            </Property>
            <Property>
               <Name>RF_Channel_Spacing</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150256);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150256 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the center-to-center spacing between the Main channel and adjacent channels when performing ACPR measurements using a frequency domain trace."</Description>
            </Property>
            <Property>
               <Name>RF_Detection_Method</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150241);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150241 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the detection method the oscilloscope should use when acquiring a RF trace. The value applies only to RF_AVE,RF_NORM,RF_MINH,RF_MAXH.
Only available when TKDPO4K_ATTR_RF_DETECTION_MODE is set to  TKDPO4K_VAL_RF_DETECT_MODE_MANUAL"</Description>
            </Property>
            <Property>
               <Name>RF_Detection_Mode</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150242);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150242 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the RF detection within the oscilloscope occurs automatically or manually."</Description>
            </Property>
            <Property>
               <Name>RF_FFT_Window</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150253);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150253 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies which window will be used for the windowing function, which is only used for the three time domain RF traces (RF Amplitude vs. Time, RF Frequency vs. Time and RF Phase vs. Time).
The windowing function is a Fast Fourier Transform (FFT) technique used to minimize the discontinuities between successive frames of an RF time domain signal."</Description>
            </Property>
            <Property>
               <Name>RF_Frequency_Center</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150263);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150263 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the center frequency of the RF acquisition system."</Description>
            </Property>
            <Property>
               <Name>RF_Frequency_Span</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150264);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150264 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the range of frequencies that can be observed around the center frequency."</Description>
            </Property>
            <Property>
               <Name>RF_Frequency_Start</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150249);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150249 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the Start frequency for the frequency domain traces in Hz"</Description>
            </Property>
            <Property>
               <Name>RF_Frequency_Stop</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150250);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150250 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the Stop frequency for the frequency domain traces in Hz."</Description>
            </Property>
            <Property>
               <Name>RF_IQ_Data_File_Format</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the file format for saving the RF baseband I &amp; Q data.

SCPI Command:
:SAVe:WAVEform:FILEFormat:RF_BB_IQ"</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_ACPR_Adjacent_Pairs</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150255);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150255 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"When the RF measurement type has been set to ACPR, the frequency domain displays a Main channel in the center, and a side channel group on either side of the main channel. There can be either 1, 2 or 3 channels within each side group; this attribute specifies that number."</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_ACPR_Ratio</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150259);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Measures a ratio between specified adjacent side channel and the main channel when performing ACPR measurements.The power in the adjacent channel is equivalent to the power in the main channel (dBm) added to the power ratio (dB) of the adjacent channel."</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_OBW_High_Frequency</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150262);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The upper frequency threshold (on the display, the white line on the right side of the center). 
Only available when TKDPO4K_ATTR_RF_MEASURE_TYPE is set to OBW."</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_OBW_Low_Frequency</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150261);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The lower frequency threshold (on the display, the white line on the left side of the screen).
Only available when TKDPO4K_ATTR_RF_MEASURE_TYPE is set to OBW."</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_OBW_Percent_Down</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150260);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150260 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the percentage of total power that fits within the occupied bandwidth; the rest of the power constitutes what remains on either side in the Analysis Bandwidth. The resolution of the value is 0.1
This value only applies when RF Measurement Type is OBW"</Description>
            </Property>
            <Property>
               <Name>RF_Measurement_Type</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150254);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150254 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RF measurement type: Channel Power, Adjacent Channel Power Ratio, Occupied Bandwidth, or none."</Description>
            </Property>
            <Property>
               <Name>RF_Number_Averages</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150239);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150239 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>32.0</Value>
                     <Value>256.0</Value>
                     <Value>512.0</Value>
                     <Value>8.0</Value>
                     <Value>16.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>128.0</Value>
                     <Value>64.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The number of acquisitions to be used when creating the
RF Average frequency domain trace, which displays the average of values from
multiple acquisitions at each trace point.
Only available for MDO models"</Description>
            </Property>
            <Property>
               <Name>RF_Phase_in_Degrees</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151006 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets  the phase, in degrees, at the trigger point for the RF_PHASe time domain trace. 

SCPI Command:
:RF:RF_PHASe:REFERence:DEGrees"</Description>
            </Property>
            <Property>
               <Name>RF_Phase_Wrap_Control_State</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151008, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the state of the phase wrap control for the RF_PHASe time domain trace. 

SCPI Command:
:RF:RF_PHASe:WRAP:STATE"</Description>
            </Property>
            <Property>
               <Name>RF_Phase_Wrap_Degrees_Number</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151007);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151007 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the number of degrees to wrap the RF_PHASe time domain trace.

SCPI Command:
:RF:RF_PHASe:WRAP:DEGrees"</Description>
            </Property>
            <Property>
               <Name>RF_Reference_Level</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150251);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150251 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the reference level of the RF input.
Set it to TKDPO4K_VAL_RF_REF_LEVEL_AUTO cause the reference level set automatically."</Description>
            </Property>
            <Property>
               <Name>RF_Resolution_Bandwidth</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150246);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150246 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the resolution bandwidth (RBW) when the TKDPO4K_ATTR_RF_RBW_MODE has been set to TKDPO4K_VAL_RF_RBW_MODE_MANUAL"</Description>
            </Property>
            <Property>
               <Name>RF_Resolution_Bandwidth_Mode</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150247);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150247 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the resolution bandwidth (RBW) mode, either automatic
or manual."</Description>
            </Property>
            <Property>
               <Name>RF_Span_Resolution_Bandwidth_Ratio</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150248);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150248 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ratio of the span to the resolution bandwidth (RBW) that will be used when the TKDPO4K_ATTR_RF_RBW_MODE is set to TKDPO4K_VAL_RF_RBW_MODE_AUTO."</Description>
            </Property>
            <Property>
               <Name>RF_Spectrum_Mode</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150245);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150245 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the RF spectrum mode: either Triggered or Freerun.
Can be used only when the frequency domain waveforms are displayed.
The Free Run spectrum mode is only possible when all analog and digital channels are turned off."</Description>
            </Property>
            <Property>
               <Name>RF_Squelch_State</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150243);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150243, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Turns the squelch control on or off for the RF Frequency vs. Time and RF Phase vs. Time traces."</Description>
            </Property>
            <Property>
               <Name>RF_Squelch_Threshold</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150244);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150244 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the squelch threshold level, in volts, for the RF Frequency vs. Time and RF Phase vs. Time traces."</Description>
            </Property>
            <Property>
               <Name>RF_Units</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150252);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150252 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the vertical units to be used in all RF-related absolute
logarithmic amplitudes."</Description>
            </Property>
            <Property>
               <Name>RF_Versus_Time_Bandwidth</Name>
               <Location>RFChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the RF versus time bandwidth.

SCPI Command:
:RF:RF_V_TIMe:BANDWidth?"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Triggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Triggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Lower_Threshold_By_Channel</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150096);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150096 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the lower limit for the channel selected. Each channel can have an independent level. When you select a certain channel as trigger source, the scope uses the channel specific level as voltage lower threshold of trigger subsystem.
This attribute affects instrument behavior only when you set the TKDPO4K_ATTR_TRIGGER_TYPE attribute to TKDPO4K_VAL_RUNT_TRIGGER or TKDPO4K_VAL_TRANSITION_TRIGGER.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
            <Property>
               <Name>Serial_Trigger_Source</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150151);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150151 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the bus channel as serial trigger source."</Description>
            </Property>
            <Property>
               <Name>Trigger_Holdoff</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250016 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time the oscilloscope waits after it detects a trigger until the oscilloscope enables the trigger subsystem to detect another trigger. The units are seconds. The TKDPO4K_ATTR_TRIGGER_HOLDOFF attribute affects instrument operation only when the oscilloscope requires multiple acquisitions to build a complete waveform. The oscilloscope requires multiple waveform acquisitions when it uses equivalent-time sampling or when you set the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to TKDPO4K_VAL_ENVELOPE or TKDPO4K_VAL_AVERAGE.

Valid Range: 20.0e-9 to 8.0 seconds. 

Resolution: Varies - Coercible Only By Instrument.      "</Description>
            </Property>
            <Property>
               <Name>Trigger_Level</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250017);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250017 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the voltage threshold for the trigger subsystem. The units are volts. It affects trigger level of the channel specified as trigger source. This attribute affects instrument behavior only when you set the TKDPO4K_ATTR_TRIGGER_TYPE attribute to TKDPO4K_VAL_EDGE_TRIGGER or TKDPO4K_VAL_GLITCH_TRIGGER.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
            <Property>
               <Name>Trigger_Level_By_Channel</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150094);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150094 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the level for the specified channel. Each channel can have an independent level. When you select a certain channel as trigger source, the scope uses the channel specific level as voltage threshold of trigger subsystem.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
            <Property>
               <Name>Trigger_Level_on_Auxiliary_Input</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Configures the threshold voltage level when triggering on the auxiliary input waveform.

SCPI Command:
:TRIGger:A:LEVel:AUXin"</Description>
            </Property>
            <Property>
               <Name>Trigger_Modifier</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250102 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the trigger modifier. The trigger modifier determines the behavior of the oscilloscope in the absence of the trigger you configure.
"</Description>
            </Property>
            <Property>
               <Name>Trigger_Source</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1250013, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1250013 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source the oscilloscope monitors for a trigger. Set this attribute to a channel name or to one of the values below.
    
Valid Channel Names: 
For four-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_CH_3 ('CH3') - Channel 3
- TKDPO4K_VAL_CH_4 ('CH4') - Channel 4
- TKDPO4K_VAL_EXTERNAL ('EXT')
- TKDPO4K_VAL_AC_LINE ('LINE')

For two-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_EXTERNAL ('EXT')

For MSO models:
  - TKDPO4K_VAL_D_0          ('D0')  - Digital Channel 0
  - TKDPO4K_VAL_D_1          ('D1')  - Digital Channel 1
  - TKDPO4K_VAL_D_2          ('D2')  - Digital Channel 2
  - TKDPO4K_VAL_D_3          ('D3')  - Digital Channel 3
  - TKDPO4K_VAL_D_4          ('D4')  - Digital Channel 4
  - TKDPO4K_VAL_D_5          ('D5')  - Digital Channel 5
  - TKDPO4K_VAL_D_6          ('D6')  - Digital Channel 6
  - TKDPO4K_VAL_D_7          ('D7')  - Digital Channel 7
  - TKDPO4K_VAL_D_8          ('D8')  - Digital Channel 8
  - TKDPO4K_VAL_D_9          ('D9')  - Digital Channel 9
  - TKDPO4K_VAL_D_10         ('D10') - Digital Channel 10
  - TKDPO4K_VAL_D_11         ('D11') - Digital Channel 11
  - TKDPO4K_VAL_D_12         ('D12') - Digital Channel 12
  - TKDPO4K_VAL_D_13         ('D13') - Digital Channel 13
  - TKDPO4K_VAL_D_14         ('D14') - Digital Channel 14
  - TKDPO4K_VAL_D_15         ('D15') - Digital Channel 15

For MDO Models:
  - TKDPO4K_VAL_RF_CHANNEL   ('RF Channel') - RF Channel"</Description>
            </Property>
            <Property>
               <Name>Trigger_Type</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1007.0</Value>
                     <Value>1011.0</Value>
                     <Value>3.0</Value>
                     <Value>1003.0</Value>
                     <Value>1004.0</Value>
                     <Value>1005.0</Value>
                     <Value>1002.0</Value>
                     <Value>4.0</Value>
                     <Value>1006.0</Value>
                     <Value>7.0</Value>
                     <Value>1.0</Value>
                     <Value>1001.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This attribute specifies the trigger type. There are 5 general trigger types with 12 specific trigger types. 
----------------------------------------
General Type   |     Specific Type
----------------------------------------    
Edge Trigger   |     Edge Trigger
               |     AC Line Trigger
----------------------------------------    
Pulse Trigger  |     Runt Trigger
               |     Glitch Trigger
               |     Transition Trigger
----------------------------------------
Logic Trigger  |     Pattern Trigger
               |     State Trigger   
               |     Sethold Trigger
----------------------------------------
Video Trigger  |     Video Trigger
----------------------------------------        
Serial Trigger |     I2C Trigger
               |     SPI Trigger
               |     CAN Trigger
               |     RS232 Trigger
               |     Parallel Trigger
----------------------------------------

Notes:
(1) Parallel Trigger is valid only in MSO4K models."</Description>
            </Property>
            <Property>
               <Name>Upper_Threshold_By_Channel</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150095);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150095 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the upper limit for the channel selected. Each channel can have an independent level. When you select a certain channel as trigger source, the scope uses the channel specific level as voltage upper threshold of trigger subsystem.
This attribute affects instrument behavior only when you set the TKDPO4K_ATTR_TRIGGER_TYPE attribute to TKDPO4K_VAL_RUNT_TRIGGER or TKDPO4K_VAL_TRANSITION_TRIGGER.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringACLineTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringACLineTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AC_Line_Trigger_Slope</Name>
               <Location>TriggeringACLineTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250701);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250701 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the slope of the zero crossing upon which the scope triggers.

"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringCANTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringCANTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CAN_Condition</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150107);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150107 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>1.0</Value>
                     <Value>6.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>7.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition for CAN triggering."</Description>
            </Property>
            <Property>
               <Name>CAN_Data_Size</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150110);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150110 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of the data string in bytes for CAN triggering.

Valid Range: 1 ~ 8 bytes."</Description>
            </Property>
            <Property>
               <Name>CAN_Data_Value</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150111, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150111 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string to use for CAN triggering.

When you choose TKDPO4K_VAL_CAN_COND_DATA as the condition for CAN triggering, the oscilloscope compares CAN data of the input channel with the value you specify to this attribute and triggers when it detects matching data.

When you choose TKDPO4K_VAL_CAN_COND_IDANDDATA as the condition for CAN triggering, the oscilloscope compares CAN data of the input channel with the value you specify to this attribute and CAN identifier you specify to the TKDPO4K_ATTR_CAN_ID_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes). 

For example, if you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100. 

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>CAN_Frame_Type</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150112);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150112 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the CAN frame type. When you choose TKDPO4K_VAL_CAN_COND_FRAMETYPE as the condition for CAN triggering, the oscilloscope triggers when the input CAN frame matches the frame type you specify for this attribute."</Description>
            </Property>
            <Property>
               <Name>CAN_ID_Mode</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150108);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150108 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the CAN address mode. "</Description>
            </Property>
            <Property>
               <Name>CAN_ID_Value</Name>
               <Location>TriggeringCANTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150109, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150109 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary address string for CAN triggering.

When you choose TKDPO4K_VAL_CAN_COND_IDENTIFIER as the condition for CAN triggering, the oscilloscope compares CAN identifier of the input channel with the value you specify to this attribute and triggers when it detects the matching identifier.

When you choose TKDPO4K_VAL_CAN_COND_IDANDDATA as the condition for CAN triggering, the oscilloscope compares CAN data of the input channel with the value you specify to this attribute and CAN identifier you specify to the TKDPO4K_ATTR_CAN_DATA_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes). 

For example, if you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100.

Default Value: XXXXXXXXXXX"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringDelayedTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringDelayedTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay_Trigger_Coupling</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150014 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>102.0</Value>
                     <Value>103.0</Value>
                     <Value>101.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how to couple the input signal to the delayed trigger.
"</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Events</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of main trigger events that occur after the main trigger and before the oscilloscope looks for the delay trigger event.
    "</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Level</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150016 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the amplitude threshold for the delay trigger. The units are volts.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Mode</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150011);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150011 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the operation mode for the delayed trigger.  
"</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Slope</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150015);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150015 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies if the delay trigger occurs on the rising edge (TKDPO4K_VAL_POSITIVE) or on the falling edge (TKDPO4K_VAL_NEGATIVE) when the waveform passes through the trigger level specified by the TKDPO4K_ATTR_DELAY_TRIGGER_LEVEL attribute."</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Source</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150013, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150013 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the delay trigger source.

Valid Range:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
and two more for four-channel versions:
- TKDPO4K_VAL_CH_3 ('CH3') - Channel 3
- TKDPO4K_VAL_CH_4 ('CH4') - Channel 4

Additional Trigger Sources:
    TKDPO4K_VAL_EXTERNAL - Specifies the External Voltage as the B edge trigger source.
    TKDPO4K_VAL_AC_LINE_TRIGGER - Specifies the AC line Voltage as the B edge trigger source.
"</Description>
            </Property>
            <Property>
               <Name>Delay_Trigger_Time</Name>
               <Location>TriggeringDelayedTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150148);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150148 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the time period delayed after the main trigger and before the oscilloscope looks for the delay trigger event."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringEdgeTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringEdgeTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Trigger_Coupling</Name>
               <Location>TriggeringEdgeTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250014 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>102.0</Value>
                     <Value>103.0</Value>
                     <Value>101.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how the oscilloscope couples the trigger source. This attribute affects instrument behavior only when the TKDPO4K_ATTR_TRIGGER_TYPE attribute is set to TKDPO4K_VAL_EDGE_TRIGGER."</Description>
            </Property>
            <Property>
               <Name>Trigger_Slope</Name>
               <Location>TriggeringEdgeTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250018);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250018 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether a rising or a falling edge triggers the oscilloscope. This attribute affects instrument behavior only when you set the TKDPO4K_ATTR_TRIGGER_TYPE attribute to TKDPO4K_VAL_EDGE_TRIGGER."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringEthernetTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringEthernetTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Basic_Condition</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150217);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150217 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>9.0</Value>
                     <Value>6.0</Value>
                     <Value>3.0</Value>
                     <Value>8.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>7.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition to trigger on for ethernet serial bus trigger. "</Description>
            </Property>
            <Property>
               <Name>Data</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150222, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150222 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the string to be used for Ethernet trigger when trigger condition is data.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>Frame_Type</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150216);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150216 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the split transaction field to trigger on."</Description>
            </Property>
            <Property>
               <Name>IP_Header_Destination_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150224, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150224 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the destination address to trigger on for Ethernet trigger when trigger condition is IP header.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>IP_Header_Source_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150223, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150223 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source address to trigger on for Ethernet trigger when trigger condition is IP header.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>IP_Protocol</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150234, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150234 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the protocol string to trigger on for Ethernet trigger when trigger condition is IP header. 

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>MAC_Header_Destination_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150226, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150226 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the MAC destination address for Ethernet trigger.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>MAC_Header_Source_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150225, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150225 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the MAC source address for Ethernet trigger.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>MAC_Length</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150228, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150228 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length or type value for Ethernet trigger.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>MAC_Upper_Length</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150227, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150227 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length or type upper limit value for Ethernet trigger.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150220);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150220 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the data offset in bytes."</Description>
            </Property>
            <Property>
               <Name>QTAG_Value</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150229, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150229 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the Q-Tag value for Ethernet trigger when trigger condition is QTAG

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>QUALIFIER</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150218);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150218 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>6.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                     <Value>5.0</Value>
                     <Value>4.0</Value>
                     <Value>7.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the ethernet trigger qualifier for MAC length/type and data. "</Description>
            </Property>
            <Property>
               <Name>Size</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150219);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150219 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of contiguous data bytes to trigger on."</Description>
            </Property>
            <Property>
               <Name>TCP_Acknowledgement_Number</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150231, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150231 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the acknowledgement number to trigger on for Ethernet trigger when trigger condition is TCP header.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>TCP_Header_Destination_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150233, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150233 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the destination address to trigger on for Ethernet trigger when trigger condition is TCP header.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>TCP_Header_Source_Address</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150232, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150232 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source address to trigger on for Ethernet trigger when trigger condition is TCP header.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>TCP_Sequence_Number</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150230, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150230 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the sequence number to trigger on for Ethernet trigger when trigger condition is TCP header. 

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>Upper_Limit</Name>
               <Location>TriggeringEthernetTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150221, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150221 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the upper limit for in range and out of range qualifiers for ethernet trigger when trigger condition is data.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringGlitchTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringGlitchTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Glitch_Condition</Name>
               <Location>TriggeringGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250403);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250403 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>101.0</Value>
                     <Value>2.0</Value>
                     <Value>102.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the glitch condition. This attribute determines whether the glitch trigger happens when the oscilloscope detects a pulse with a width that meets the condition."</Description>
            </Property>
            <Property>
               <Name>Glitch_Polarity</Name>
               <Location>TriggeringGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250402);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250402 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the polarity of the glitch that triggers the oscilloscope."</Description>
            </Property>
            <Property>
               <Name>Glitch_Width</Name>
               <Location>TriggeringGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250401);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250401 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the glitch width. The units are seconds. The oscilloscope triggers when it detects a pulse with a width that meets the condition specified by the TEKDPO4K_ATTR_GLITCH_CONDITION attribute.
    
Valid Range: 4.0e-9 ~ 8.0 seconds

Resolution: 0.8e-9 seconds    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringI2CTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringI2CTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>I2C_Address_Mode</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150114);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150114 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the I2C address mode. "</Description>
            </Property>
            <Property>
               <Name>I2C_Address_Value</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150115, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150115 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the I2C bus address value.

When you choose TKDPO4K_VAL_I2C_COND_ADDRESS as the condition for I2C triggering, the oscilloscope compares I2C address of the input channel with the value you specify to this attribute and triggers when it detects a matching address.

When you choose TKDPO4K_VAL_I2C_COND_ADDRANDDATA as the condition for I2C triggering, the oscilloscope compares I2C address of the input channel with the value you specify to this attribute and I2C data you specify to the TKDPO4K_ATTR_I2C_DATA_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes).

For example, if you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100.

Default Value: XXXXXXX"</Description>
            </Property>
            <Property>
               <Name>I2C_Condition</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150113);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150113 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>6.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                     <Value>7.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition for I2C bus triggering."</Description>
            </Property>
            <Property>
               <Name>I2C_Data_Direction</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150118);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150118 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the data direction for I2C triggering. You can specify that the oscilloscope triggers upon a reading, writing, or either packet."</Description>
            </Property>
            <Property>
               <Name>I2C_Data_Size</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150116);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150116 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of the data string in  bytes for I2C triggering.

Valid Range: 1 ~ 12 bytes.
"</Description>
            </Property>
            <Property>
               <Name>I2C_Data_Value</Name>
               <Location>TriggeringI2CTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150117, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150117 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the I2C bus data value.

When you choose TKDPO4K_VAL_I2C_COND_DATA as the condition for I2C triggering, the oscilloscope compares I2C data of the input channel with the value you specify to this attribute and triggers when it detects matching data.

When you choose TKDPO4K_VAL_I2C_COND_ADDRANDDATA as the condition for I2C triggering, the oscilloscope compares I2C data of the input channel with the value you specify to this attribute and I2C address you specify to the TKDPO4K_ATTR_I2C_ADDR_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes).

For example, if you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100.

Default Value: XXXXXXXX"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringLogicTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringLogicTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Logic_Condition</Name>
               <Location>TriggeringLogicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>6.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the condition for the oscilloscope to generate a logic pattern trigger or a logic state trigger with respect to the defined logic pattern or logic state. This is a hidden attribute that is used internally by the TKDPO4K_ATTR_PATTERN_WHEN and TKDPO4K_ATTR_STATE_WHEN attributes."</Description>
            </Property>
            <Property>
               <Name>Logic_Function</Name>
               <Location>TriggeringLogicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the logic combination of the input channels for the pattern or state logic triggers. This is a hidden attribute and used internally by the TKDPO4K_ATTR_PATTERN_WHEN and TKDPO4K_ATTR_STATE_WHEN attributes."</Description>
            </Property>
            <Property>
               <Name>Logic_Input_By_Channel</Name>
               <Location>TriggeringLogicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the logical input for the specified logic trigger channel. "</Description>
            </Property>
            <Property>
               <Name>Logic_Threshold_By_Channel</Name>
               <Location>TriggeringLogicTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150097);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150097 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the threshold for the specified channel. Each channel can have an independent level. When you select a certain channel as trigger source, the scope uses the channel specific level as voltage threshold of trigger subsystem.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringParallelTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringParallelTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Parallel_Value</Name>
               <Location>TriggeringParallelTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150195, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150195 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string for a parallel trigger.

Notes:
(1) This attribute is valid only in MSO models."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringPatternTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringPatternTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Pattern_Function</Name>
               <Location>TriggeringPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150026);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150026 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the logic combination of the input channels for the pattern triggers. This attribute internally calls the TKDPO4K_ATTR_LOGIC_FUNCTION attribute."</Description>
            </Property>
            <Property>
               <Name>Pattern_Input</Name>
               <Location>TriggeringPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150098);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150098 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the logical input for the specified logic trigger channel. "</Description>
            </Property>
            <Property>
               <Name>Pattern_Maximum_Time</Name>
               <Location>TriggeringPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150028);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150028 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies or returns the pattern trigger time value. The time value is set as part of the pattern trigger condition to determine if the duration of a logic pattern meets the specified time constraints.

Valid Range: 4.0e-9 ~ 8.0 seconds

Resolution: 0.8e-9 seconds
"</Description>
            </Property>
            <Property>
               <Name>Pattern_When</Name>
               <Location>TriggeringPatternTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150027);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150027 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition for the oscilloscope to generate a logic pattern trigger with respect to the defined logic pattern. This attribute internally sets the TKDPO4K_ATTR_LOGIC_WHEN attribute."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringRS232Trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringRS232Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>RS232_Condition</Name>
               <Location>TriggeringRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150190);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150190 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>6.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition for a RS232C trigger."</Description>
            </Property>
            <Property>
               <Name>RS232_RX_Data_Size</Name>
               <Location>TriggeringRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150192);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150192 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of the data string in bytes for a RS232 trigger if the trigger condition is RXDATA.

Valid Range: 1 ~ 128

Default Value: 1"</Description>
            </Property>
            <Property>
               <Name>RS232_RX_Data_Value</Name>
               <Location>TriggeringRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150191, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150191 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string for a RS232 trigger if the trigger condition involves RX."</Description>
            </Property>
            <Property>
               <Name>RS232_TX_Data_Size</Name>
               <Location>TriggeringRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150194);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150194 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of the data string for a RS232 trigger if the trigger condition is TXDATA.

Valid Range: 1 ~ 128

Default Value: 1"</Description>
            </Property>
            <Property>
               <Name>RS232_TX_Data_Value</Name>
               <Location>TriggeringRS232Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150193, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150193 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string for a RS232 trigger if the condition involves TX."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringRuntTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringRuntTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Runt_High_Threshold</Name>
               <Location>TriggeringRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250301);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250301 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the high threshold the oscilloscope uses for runt triggering. The units are volts.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions.

NOTES: 
If TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD is set to a value that is lower than TKDPO4K_ATTR_RUNT_LOW_THRESHOLD, then TKDPO4K_ATTR_RUNT_LOW_THRESHOLD is set to the same value. If TKDPO4K_ATTR_RUNT_LOW_THRESHOLD is set to a value that is greater than TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD, TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD is set to the same value."</Description>
            </Property>
            <Property>
               <Name>Runt_Low_Threshold</Name>
               <Location>TriggeringRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250302);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250302 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the low threshold the oscilloscope uses for runt triggering. The units are volts.
    
Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions.

NOTES: 
If TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD is set to a value that is lower than TKDPO4K_ATTR_RUNT_LOW_THRESHOLD, then TKDPO4K_ATTR_RUNT_LOW_THRESHOLD is set to the same value. If TKDPO4K_ATTR_RUNT_LOW_THRESHOLD is set to a value that is greater than TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD, TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD is set to the same value."</Description>
            </Property>
            <Property>
               <Name>Runt_Polarity</Name>
               <Location>TriggeringRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250303);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250303 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>0.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the polarity of the runt that triggers the oscilloscope.
    "</Description>
            </Property>
            <Property>
               <Name>Runt_Trigger_When</Name>
               <Location>TriggeringRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150008 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the instrument to trigger on runt pulses with specified width condition.
 "</Description>
            </Property>
            <Property>
               <Name>Runt_Width</Name>
               <Location>TriggeringRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150009 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the runt width. The units are seconds. The oscilloscope triggers when it detects a runt pulse with a width that meets the condition specified by the TKDPO4K_ATTR_RUNT_CONDITION attribute.    

Valid Range: 4.0e-9 ~ 8.0 seconds

Resolution: 0.8e-9 seconds"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringSetHoldTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringSetHoldTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Hold_Time</Name>
               <Location>TriggeringSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150105 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the hold time for setup and hold triggering. The oscilloscope 
triggers when it detects a setup time violation or a hold time violation.

Valid Range:
  For DPO4K models:
    4.0e-9 ~ 8.0 seconds
  For MSO4K models:
    1.0e-9 ~ 1.0e-3 seconds

Resolution:
  For DPO4K models:
    0.8e-9 seconds
  For MSO4K models:
    0.5e-9 seconds"</Description>
            </Property>
            <Property>
               <Name>Set_Time</Name>
               <Location>TriggeringSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150106 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the setup time for setup and hold triggering. The oscilloscope 
triggers when it detects a setup time violation or a hold time violation.

Valid Range:
  For DPO4K models:
    0.0e-9 ~ 8.0 seconds
  For MSO4K models:
    -0.5e-9 ~ 1.0e-3 seconds

Resolution:
  For DPO4K models:
    0.8e-9 seconds
  For MSO4K models:
    0.5e-9 seconds"</Description>
            </Property>
            <Property>
               <Name>SetHold_Clock_Edge</Name>
               <Location>TriggeringSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150102 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the clock edge polarity for setup and hold triggering."</Description>
            </Property>
            <Property>
               <Name>SetHold_Clock_Source</Name>
               <Location>TriggeringSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150103 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the clock source for setup and hold triggering."</Description>
            </Property>
            <Property>
               <Name>SetHold_Data_Source</Name>
               <Location>TriggeringSetHoldTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150104);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150104 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>21.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the data source for setup and hold triggering. "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringSPITrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringSPITrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SPI_Condition</Name>
               <Location>TriggeringSPITrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150119);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150119 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition for SPI triggering."</Description>
            </Property>
            <Property>
               <Name>SPI_Data_Size</Name>
               <Location>TriggeringSPITrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150120);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150120 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of the data string in bytes for SPI triggering.

Valid Range: 1 ~ 16 bytes."</Description>
            </Property>
            <Property>
               <Name>SPI_MISO_Value</Name>
               <Location>TriggeringSPITrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150122, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150122 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string for SPI triggering.

When you choose TKDPO4K_VAL_SPI_MISO as the condition for SPI triggering, the oscilloscope compares SPI MISO data value of the input channel with the value you specify to this attribute and triggers when it detects a matching MISO data value.

When you choose TKDPO4K_VAL_SPI_MISOMOSI as the condition for SPI triggering, the oscilloscope compares SPO MISO data value of the input channel with the value you specify to this attribute and MOSI data you specify to the TKDPO4K_ATTR_SPI_MOSI_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes).

For example, If you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>SPI_MOSI_Value</Name>
               <Location>TriggeringSPITrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150121, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150121 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the binary data string for SPI triggering.

When you choose TKDPO4K_VAL_SPI_MOSI as the condition for SPI triggering, the oscilloscope compares SPI MOSI data value of the input channel with the value you specify to this attribute and triggers when it detects a matching MOSI data value.

When you choose TKDPO4K_VAL_SPI_MISOMOSI as the condition for SPI triggering, the oscilloscope compares SPO MOSI data value of the input channel with the value you specify to this attribute and MISO data you specify to the TKDPO4K_ATTR_SPI_MISO_VALUE attribute. If they match, the oscilloscope triggers.

Valid Format: You can specify 0 (dominant bit), 1 (recessive bit) or X (do not care) to each bit with a total length of no more than 64 bits (8 bytes).

For example, if you specify the value as XX1100, the oscilloscope triggers when detecting data equal to 0 in the first two bits and 1 in the next two bits. Higher bits are ignored. So the oscilloscope triggers on both CAN frames with values of 001100 and 111100.

Default Value: XXXXXXXX"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringStateTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringStateTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>State_Clock_Edge</Name>
               <Location>TriggeringStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150101);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150101 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the clock edge polarity for state triggering. "</Description>
            </Property>
            <Property>
               <Name>State_Function</Name>
               <Location>TriggeringStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150099);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150099 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the logic combination of the input channels for the state triggers. This attribute internally calls the TKDPO4K_ATTR_LOGIC_FUNCTION attribute."</Description>
            </Property>
            <Property>
               <Name>State_Input</Name>
               <Location>TriggeringStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150100);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150100 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the logical input for the specified logic trigger channel. "</Description>
            </Property>
            <Property>
               <Name>State_Trigger_Clock_Source</Name>
               <Location>TriggeringStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150092);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150092 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the clock source for state triggering. The oscilloscope runs in logic pattern mode if you do specify TKDPO4K_VAL_SOUR_NONE for this attribute. Otherwise it runs in logic state mode."</Description>
            </Property>
            <Property>
               <Name>State_When</Name>
               <Location>TriggeringStateTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150036);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150036 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies which transition of the logic condition (to true or false) triggers the oscilloscope on the specified State Clock Edge. This attribute internally calls the TKDPO4K_ATTR_LOGIC_WHEN attribute."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringTransitionTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringTransitionTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slew_Delta_Time</Name>
               <Location>TriggeringTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150019);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150019 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the delta time in seconds (between the levels TKDPO4K_ATTR_SLEW_HIGH_THRESHOLD and TKDPO4K_ATTR_SLEW_LOW_THRESHOLD) that the oscilloscope uses to compute the slew rate.  

The oscilloscope calculates the slew rate as follows:
(High Threshold - Low Threshold) / Delta Time.
    
Valid Range: 4.0e-9 ~ 8.0 seconds

Resolution: 0.8e-9 seconds  "</Description>
            </Property>
            <Property>
               <Name>Transition_High_Threshold</Name>
               <Location>TriggeringTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150020);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150020 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the higher (more positive) of the two threshold levels that a pulse must traverse for slew rate triggering to occur.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions.

NOTES: 
If TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD is set to a value that is lower than TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD, then TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD is set to the same value. If TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD is set to a value that is greater than TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD, TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD is set to the same value."</Description>
            </Property>
            <Property>
               <Name>Transition_Low_Threshold</Name>
               <Location>TriggeringTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150021 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the lower (more negative) of the two threshold levels that a pulse must traverse for slew rate triggering to occur.

Valid Range:
  -8 divisions from signal reference to +8 divisions from signal reference with     
  maximum range of -40~40.

Resolution: 
  0.2 divisions.

NOTES: 
If TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD is set to a value that is lower than TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD, then TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD is set to the same value. If TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD is set to a value that is greater than TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD, TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD is set to the same value."</Description>
            </Property>
            <Property>
               <Name>Transition_Polarity</Name>
               <Location>TriggeringTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150017);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150017 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the oscilloscope triggers on a positive transition, a negative transition, or either transition.  

The oscilloscope calculates the slew rate as follows:
(High Threshold - Low Threshold) / Delta Time.
    "</Description>
            </Property>
            <Property>
               <Name>Transition_When</Name>
               <Location>TriggeringTransitionTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150018);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150018 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the transition trigger condition. The oscilloscope triggers when it meets the transition condition."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringTVTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringTVTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Custom_Line_Period</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150196);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150196 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the line period for the standard under test.

Valid Range: 0 ~ 500 us"</Description>
            </Property>
            <Property>
               <Name>Custom_Sync_Interval</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150197);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150197 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the sync interval for the standard under test.

Valid Range: 0 ~ 200 us"</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Custom_Format</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150182);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150182 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the video trigger format. This attribute is valid only when the video format is custom."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Custom_Scan_Rate</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150183);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150183 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the horizontal line scan rate of the A video trigger. This attribute is valid only when the video format is custom."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Field</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250205);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250205 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the event on which the oscilloscope triggers.  
"</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Field_Holdoff</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150181);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150181 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the video trigger holdoff in terms of video fields.

Valid Range: 0.0 ~ 8.5

Resolution: 0.5"</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_HDTV_Format</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150180);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150180 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>7.0</Value>
                     <Value>4.0</Value>
                     <Value>6.0</Value>
                     <Value>3.0</Value>
                     <Value>5.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the HDTV video signal format on which to trigger."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Line</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250206 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the TV line on which the oscilloscope triggers.

The valid range depends upon the setting of the TKDPO4K_ATTR_TV_TRIGGER_SIGNAL_FORMAT attribute. The line number has different valid ranges according to different signal types.

--------------------------------
Signal Format  |  Valid Range
--------------------------------
NTSC           |  1 ~ 525
--------------------------------
PAL            |  
SECAM          |
CUSTOM         |  1 ~ 625
HDTV           |
EIA343         |
--------------------------------"</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Polarity</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250204);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250204 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the polarity of the TV signal."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Signal_Type</Name>
               <Location>TriggeringTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250201);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250201 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1006.0</Value>
                     <Value>1015.0</Value>
                     <Value>1011.0</Value>
                     <Value>1017.0</Value>
                     <Value>2.0</Value>
                     <Value>1008.0</Value>
                     <Value>1013.0</Value>
                     <Value>1.0</Value>
                     <Value>1004.0</Value>
                     <Value>1016.0</Value>
                     <Value>1018.0</Value>
                     <Value>1003.0</Value>
                     <Value>1007.0</Value>
                     <Value>1014.0</Value>
                     <Value>1009.0</Value>
                     <Value>1010.0</Value>
                     <Value>3.0</Value>
                     <Value>1012.0</Value>
                     <Value>1005.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of TV signal on which the oscilloscope triggers."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringUSBTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringUSBTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Split_Transaction_Endpoint</Name>
               <Location>TriggeringUSBTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150213);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150213 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the split transaction field to trigger on."</Description>
            </Property>
            <Property>
               <Name>Split_Transaction_Hub_Address</Name>
               <Location>TriggeringUSBTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150214, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150214 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies binary data string to be used for USB trigger when triggering on a split transaction hub address.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>Split_Transaction_Port_Address</Name>
               <Location>TriggeringUSBTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150215, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150215 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies binary data string to be used for USB trigger when triggering on a split transaction port address.

You can specify 0 (dominant bit), 1 (recessive bit), or X (do not care) to each bit.

Default Value: XXXXXXXX"</Description>
            </Property>
            <Property>
               <Name>Split_Transaction_Start_End</Name>
               <Location>TriggeringUSBTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150212);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150212 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>6.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the split transaction field to trigger on."</Description>
            </Property>
            <Property>
               <Name>USB_Split_Transaction_Field</Name>
               <Location>TriggeringUSBTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150211);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150211 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the split transaction field to trigger on.
"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disable(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_Disable', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.</Description>
            </Method>
            <Method>
               <Name>errormessage</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorMessage] = errormessage(obj, ErrorCode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_error_message', session, ErrorCode, ErrorMessage);

ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function converts a status code returned by an instrument driver function into a user-readable string. </Description>
            </Method>
            <Method>
               <Name>errorquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = errorquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_error_query', session, ErrorCode, ErrorMessage);

ErrorCode = double(ErrorCode.Value);
ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function reads an error code and a message from the error queue of the instrument.</Description>
            </Method>
            <Method>
               <Name>getchannelname</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ChannelString] = getchannelname(obj, Index, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelString = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_GetChannelName', session, Index, BufferSize, ChannelString);

ChannelString = strtrim(char(ChannelString.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the highest-level channel name that corresponds to the specific driver channel string that is in the channel table at an index you specify. By passing 0 for the buffer size, the caller can ascertain the buffer size required to get the entire channel name string and then call the function again with a sufficiently large buffer.</Description>
            </Method>
            <Method>
               <Name>invalidateallattributes</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function invalidateallattributes(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_InvalidateAllAttributes', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function invalidates the cached values of all attributes for the session.</Description>
            </Method>
            <Method>
               <Name>isinvalidwfmelement</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [IsInvalid] = isinvalidwfmelement(obj, ElementValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
IsInvalid = libpointer('uint16Ptr', 0);

status = calllib(libname, 'tkdpo4k_IsInvalidWfmElement', session, ElementValue, IsInvalid);

IsInvalid = double(IsInvalid.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>After the read and fetch waveform functions execute, each element in the waveform array contains either a voltage or a value indicating that the oscilloscope failed to sample a voltage. The driver uses an IEEE-defined NaN (Not a Number) value to mark as invalid each element in the waveform array for which the oscilloscope failed to sample a voltage. This function determines whether a value you pass from the waveform array is invalid.</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_reset', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function resets the instrument to a known state and sends initialization commands to the instrument. The initialization commands set instrument settings such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
</Description>
            </Method>
            <Method>
               <Name>resetwithdefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetwithdefaults(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ResetWithDefaults', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function resets the instrument and applies initial user specified settings from the Logical Name that was used to initialize the session. If the session was created without a Logical Name, this function is equivalent to the tkdpo4k_reset function.</Description>
            </Method>
            <Method>
               <Name>revisionquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InstrumentDriverRevision, FirmwareRevision] = revisionquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InstrumentDriverRevision = libpointer('int8Ptr', repmat(10, 1, 512));
FirmwareRevision = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_revision_query', session, InstrumentDriverRevision, FirmwareRevision);

InstrumentDriverRevision = strtrim(char(InstrumentDriverRevision.Value));
FirmwareRevision = strtrim(char(FirmwareRevision.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the revision numbers of the instrument driver and instrument firmware.</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SelfTestResult, SelfTestMessage] = selftest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SelfTestResult = libpointer('int16Ptr', 0);
SelfTestMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_self_test', session, SelfTestResult, SelfTestMessage);

SelfTestResult = double(SelfTestResult.Value);
SelfTestMessage = strtrim(char(SelfTestMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function runs the self-test routine of the instrument and returns the test result(s). 

</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityCoercionInfo</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityCoercionInfo1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getnextcoercionrecord</Name>
               <Location>UtilityCoercionInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = getnextcoercionrecord(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CoercionRecord = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_GetNextCoercionRecord', session, BufferSize, CoercionRecord);

CoercionRecord = strtrim(char(CoercionRecord.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the coercion information associated with the IVI session. This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.

If you set the TKDPO4K_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the instrument driver keeps a list of all coercions it makes on ViInt32 or ViReal64 values you pass to instrument driver functions. You use this function to retrieve information from that list.

If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.

If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.

If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.

The function returns an empty string in the Coercion Record parameter if no coercion records remain for the session.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityError</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityError1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearerror</Name>
               <Location>UtilityError</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearerror(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ClearError', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the error code and error description for the IVI session. If the user specifies a valid IVI session for the instrument_handle parameter, this function clears the error information for the session. If the user passes VI_NULL for the Vi parameter, this function clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error.

The function clears the error code by setting it to VI_SUCCESS.  If the error description string is non-NULL, the function de-allocates the error description string and sets the address to VI_NULL.

Maintaining the error information separately for each thread is useful if the user does not have a session handle to pass to the tkdpo4k_GetError function, which occurs when a call to tkdpo4k_init or tkdpo4k_InitWithOptions fails.</Description>
            </Method>
            <Method>
               <Name>geterror</Name>
               <Location>UtilityError</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Code, Description] = geterror(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Code = libpointer('int32Ptr', 0);
Description = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_GetError', session, Code, BufferSize, Description);

Code = double(Code.Value);
Description = strtrim(char(Description.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function retrieves and then clears the IVI error information for the session or the current execution thread. One exception exists: If the BufferSize parameter is 0, the function does not clear the error information. By passing 0 for the buffer size, the caller can ascertain the buffer size required to get the entire error description string and then call the function again with a sufficiently large buffer.

If the user specifies a valid IVI session for the InstrumentHandle parameter, Get Error retrieves and then clears the error information for the session. If the user passes VI_NULL for the InstrumentHandle parameter, this function retrieves and then clears the error information for the current execution thread. If the InstrumentHandle parameter is an invalid session, the function does nothing and returns an error. Normally, the error information describes the first error that occurred since the user last called tkdpo4k_GetError or tkdpo4k_ClearError.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityInstrumentIO</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityInstrumentIO1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>readinstrdata</Name>
               <Location>UtilityInstrumentIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ReadBuffer, NumBytesRead] = readinstrdata(obj, NumberofBytesToRead)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ReadBuffer = libpointer('int8Ptr', repmat(10, 1, 512));
NumBytesRead = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_ReadInstrData', session, NumberofBytesToRead, ReadBuffer, NumBytesRead);

ReadBuffer = strtrim(char(ReadBuffer.Value));
NumBytesRead = double(NumBytesRead.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function reads data from the instrument.</Description>
            </Method>
            <Method>
               <Name>writeinstrdata</Name>
               <Location>UtilityInstrumentIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writeinstrdata(obj, WriteBuffer)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
WriteBuffer = [double(WriteBuffer) 0];

status = calllib(libname, 'tkdpo4k_WriteInstrData', session, WriteBuffer);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function writes a user-specified string to the instrument.

Note: This function bypasses IVI attribute state caching. Therefore, when you call this function, the cached values for all attributes is invalidated.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityInterchangeabilityInfo</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityInterchangeabilityInfo1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearinterchangewarnings</Name>
               <Location>UtilityInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearinterchangewarnings(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ClearInterchangeWarnings', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the list of current interchange warnings.
</Description>
            </Method>
            <Method>
               <Name>getnextinterchangewarning</Name>
               <Location>UtilityInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = getnextinterchangewarning(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InterchangeWarning = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'tkdpo4k_GetNextInterchangeWarning', session, BufferSize, InterchangeWarning);

InterchangeWarning = strtrim(char(InterchangeWarning.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the interchange warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchange warning. Interchange warnings indicate that using your application with a different instrument might cause different behavior. You use this function to retrieve interchange warnings.

The driver performs interchangeability checking when the TKDPO4K_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.

The function returns an empty string in the Interchange Warning parameter if no interchange warnings remain for the session.

In general, the instrument driver generates interchange warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.</Description>
            </Method>
            <Method>
               <Name>resetinterchangecheck</Name>
               <Location>UtilityInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetinterchangecheck(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ResetInterchangeCheck', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order. To do so requires ensuring that each test module completely configures the state of each instrument it uses. If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module. If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change. This change in behavior is generally instrument specific and represents an interchangeability problem.

You can use this function to test for such cases. After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations. By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.

This function does not clear the interchange warnings from the list of previously recorded interchange warnings. If you want to guarantee that the tkdpo4k_GetNextInterchangeWarning function only returns those interchange warnings that are generated after calling this function, you must clear the list of interchange warnings. You can clear the interchange warnings list by repeatedly calling the tkdpo4k_GetNextInterchangeWarning function until no more interchange warnings are returned. If you are not interested in the content of those warnings, you can call the tkdpo4k_ClearInterchangeWarnings function.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityLocking</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityLocking1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>locksession</Name>
               <Location>UtilityLocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = locksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'tkdpo4k_LockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function obtains a multithread lock on the instrument session. Before it does so, it waits until all other execution threads have released their locks on the instrument session.

Other threads might have obtained a lock on this session in the following ways:

- Your application called tkdpo4k_LockSession.

- A call to the instrument driver locked the session.

- A call to the IVI engine locked the session.

After your call to tkdpo4k_LockSession returns successfully, no other threads can access the instrument session until you call tkdpo4k_UnlockSession.

Use tkdpo4k_LockSession and tkdpo4k_UnlockSession around a sequence of calls to instrument driver functions if you require that the instrument retain its settings through the end of the sequence.

You can safely make nested calls to tkdpo4k_LockSession within the same thread. To completely unlock the session, you must balance each call to tkdpo4k_LockSession with a call to tkdpo4k_UnlockSession. If, however, you use the Caller Has Lock parameter in all calls to tkdpo4k_LockSession and tkdpo4k_UnlockSession within a function, the IVI Library locks the session only once within the function regardless of the number of calls you make to tkdpo4k_LockSession. This allows you to call tkdpo4k_UnlockSession just once at the end of the function.</Description>
            </Method>
            <Method>
               <Name>unlocksession</Name>
               <Location>UtilityLocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = unlocksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'tkdpo4k_UnlockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function releases a lock that you acquired on an instrument session using tkdpo4k_LockSession. Refer to tkdpo4k_LockSession for additional information on session locks.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurewfmbuffersize</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurewfmbuffersize(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ConfigureWfmBufferSize', session, BufferSize);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the buffer size used in reading waveforms. The tkdpo4k_ReadWaveform, tkdpo4k_FetchWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_FetchMinMaxWaveform functions use this attribute to set the buffer size used to fetch waveforms. 

Notes: 

(1) Enlarging the buffer size is helpful to enhance the waveform-fetching speed. Call this function and adjust the buffer size before calling the tkdpo4k_ReadWaveform, tkdpo4k_FetchWaveform, tkdpo4k_ReadMinMaxWaveform, and tkdpo4k_FetchMinMaxWaveform functions.

(2) Adjust the buffer size according to the waveform size. If you have a large waveform size and have a small buffer size, enlarging the buffer size is useful for increasing the speed. But if the buffer size is equal to or even bigger than the waveform size, you cannot increase the speed by enlarging the buffer size.

(3) If you are not critical about the waveform-fetching speed, use the default value.</Description>
            </Method>
            <Method>
               <Name>readdelaymeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = readdelaymeasurement(obj, MeasureSource1, MeasureSource2, DelayEdge1, DelayEdge2, DelayDirection, MaximumTimems)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MeasureSource1 = [double(MeasureSource1) 0];
MeasureSource2 = [double(MeasureSource2) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadDelayMeasurement', session, MeasureSource1, MeasureSource2, DelayEdge1, DelayEdge2, DelayDirection, MaximumTimems, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates a new waveform acquisition and returns a delay measurement.</Description>
            </Method>
            <Method>
               <Name>readfreqdomainmeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [RFChannelPower, Unit, ACPR] = readfreqdomainmeasurement(obj, ACPRAdjacentChannel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RFChannelPower = libpointer('doublePtr', 0);
Unit = libpointer('int32Ptr', 0);
ACPR = libpointer('doublePtr', 0);
ACPRAdjacentChannel = [double(ACPRAdjacentChannel) 0];

status = calllib(libname, 'tkdpo4k_ReadFreqDomainMeasurement', session, RFChannelPower, Unit, ACPR, ACPRAdjacentChannel);

RFChannelPower = double(RFChannelPower.Value);
Unit = double(Unit.Value);
ACPR = double(ACPR.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the total channel power within specified bandwidth according to current RF measurement type. 

Only available when RF Measurement Type is not None.
You can use ConfigureRFMeasurement function to change measurement type.</Description>
            </Method>
            <Method>
               <Name>readminmaxwaveform</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement] = readminmaxwaveform(obj, ChannelName, WaveformSize, MaximumTimems, MinWaveformArray, MaxWaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
MinWaveformArray = libpointer('doublePtr', MinWaveformArray);
MaxWaveformArray = libpointer('doublePtr', MaxWaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadMinMaxWaveform', session, ChannelName, WaveformSize, MaximumTimems, MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement);

MinWaveformArray = double(MinWaveformArray.Value);
MaxWaveformArray = double(MaxWaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, and returns the min/max waveforms for the channel you specify. You call the tkdpo4k_FetchMinMaxWaveform function to obtain the min/max waveforms for each of the remaining enabled channels without initiating another acquisition.

Use this function to read waveforms when you set the acquisition type to TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.

Notes:

(1) After this function executes, each element in the Min Waveform Array and Max Waveform Array parameters is either a voltage or a value indicating that the oscilloscope cannot sample a voltage.

(2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Min Waveform Array or the Max Waveform Array to an IEEE-defined NaN (Not a Number) value.  

(3) You can test each element in the Min Waveform Array parameter and the Max Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.</Description>
            </Method>
            <Method>
               <Name>readphasemeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = readphasemeasurement(obj, MeasureSource1, MeasureSource2, MaximumTimems)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MeasureSource1 = [double(MeasureSource1) 0];
MeasureSource2 = [double(MeasureSource2) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadPhaseMeasurement', session, MeasureSource1, MeasureSource2, MaximumTimems, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates a new waveform acquisition and returns a phase measurement.</Description>
            </Method>
            <Method>
               <Name>readrfversusbandwidth</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [VersusTimeBandwidth] = readrfversusbandwidth(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
VersusTimeBandwidth = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadRFVersusBandwidth', session, VersusTimeBandwidth);

VersusTimeBandwidth = double(VersusTimeBandwidth.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function reads the RF versus time bandwidth.</Description>
            </Method>
            <Method>
               <Name>readsnapshotmeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SnapshotMeasValue] = readsnapshotmeasurement(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SnapshotMeasValue = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadSnapshotMeasurement', session, SnapshotMeasValue);

SnapshotMeasValue = double(SnapshotMeasValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function reads the requested snapshot measurement value from the last snapshot.</Description>
            </Method>
            <Method>
               <Name>readspectrogramtime</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SecondsNum, TimeStamp] = readspectrogramtime(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SecondsNum = libpointer('int32Ptr', 0);
TimeStamp = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_ReadSpectrogramTime', session, SecondsNum, TimeStamp);

SecondsNum = double(SecondsNum.Value);
TimeStamp = double(TimeStamp.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function reads the time in the spectrogram.</Description>
            </Method>
            <Method>
               <Name>readwaveform</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, InitialX, XIncrement] = readwaveform(obj, ChannelName, WaveformSize, MaximumTimems, WaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
WaveformArray = libpointer('doublePtr', WaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadWaveform', session, ChannelName, WaveformSize, MaximumTimems, WaveformArray, ActualPoints, InitialX, XIncrement);

WaveformArray = double(WaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, and returns the waveform for the channel you specify. You call the tkdpo4k_FetchWaveform function to obtain the waveforms for each of the remaining enabled channels without initiating another acquisition.

Note: After this function executes, each element in the Waveform Array parameter is a voltage.</Description>
            </Method>
            <Method>
               <Name>readwaveformmeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = readwaveformmeasurement(obj, ChannelName, MeasurementFunction, MaximumTimems)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_ReadWaveformMeasurement', session, ChannelName, MeasurementFunction, MaximumTimems, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value.  You specify a particular measurement type, such as rise time, frequency, and voltage peak-to-peak. You can call the tkdpo4k_FetchWaveformMeasurement function separately for any other waveform measurement that you want to obtain on a specific channel without initiating another acquisition.

Notes:

(1) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.

(2) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.

  TKDPO4K_ATTR_MEAS_HIGH_REF
  TKDPO4K_ATTR_MEAS_LOW_REF
  TKDPO4K_ATTR_MEAS_MID_REF
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformAcquisitionLowlevelAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformAcquisitionLowlevelAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>abort</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function abort(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_Abort', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function aborts an acquisition and returns the oscilloscope to the Idle state. You initiate an acquisition with the tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_ReadWaveformMeasurement, and tkdpo4k_InitiateAcquisition functions.

Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.</Description>
            </Method>
            <Method>
               <Name>acquisitionstatus</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AcquisitionStatus] = acquisitionstatus(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
AcquisitionStatus = libpointer('int32Ptr', 0);

status = calllib(libname, 'tkdpo4k_AcquisitionStatus', session, AcquisitionStatus);

AcquisitionStatus = double(AcquisitionStatus.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns whether an acquisition is in progress, complete, or if the status is unknown.

Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.</Description>
            </Method>
            <Method>
               <Name>fetchcontinuousminmaxwaveform</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement] = fetchcontinuousminmaxwaveform(obj, ChannelName, MinWaveformArray, MaxWaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
MinWaveformArray = libpointer('doublePtr', MinWaveformArray);
MaxWaveformArray = libpointer('doublePtr', MaxWaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchContinuousMinMaxWaveform', session, ChannelName, MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement);

MinWaveformArray = double(MinWaveformArray.Value);
MaxWaveformArray = double(MaxWaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function fetches a min and max waveform from a waveform acquisition that the user or driver previously initiated on a specific channel.                     

Note:
Call this function only when TKDPO4K_ATTR_ACQUISITION_TYPE is TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.</Description>
            </Method>
            <Method>
               <Name>fetchcontinuouswaveform</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, InitialX, XIncrement] = fetchcontinuouswaveform(obj, ChannelName, WaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
WaveformArray = libpointer('doublePtr', WaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchContinuousWaveform', session, ChannelName, WaveformArray, ActualPoints, InitialX, XIncrement);

WaveformArray = double(WaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function fetches a waveform from a specified channel and optionally return ActualPoints(Number of points actually acquired in waveform), InitialX(The time in relation to the Trigger Event of the first point in the waveform in seconds), XIncrement(The time between points in the acquired waveform in seconds). The function is used only when the instrument runs in continuous mode and is in running state.

Note:
There is no guarantee that the waveform fetched by this function is the latest one acquired by instrument. While using in loops to repeatedly acquiring waveform, it is possible that several fetched waveform is from the same acquisition.

Call this function only when TKDPO4K_ATTR_ACQUISITION_TYPE is TKDPO4K_VAL_NORMAL, TKDPO4K_VAL_HI_RES or TKDPO4K_VAL_AVERAGE.</Description>
            </Method>
            <Method>
               <Name>fetchdelaymeasurement</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = fetchdelaymeasurement(obj, MeasureSource1, MeasureSource2, DelayEdge1, DelayEdge2, DelayDirection)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MeasureSource1 = [double(MeasureSource1) 0];
MeasureSource2 = [double(MeasureSource2) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchDelayMeasurement', session, MeasureSource1, MeasureSource2, DelayEdge1, DelayEdge2, DelayDirection, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function fetches the delay measurement.</Description>
            </Method>
            <Method>
               <Name>fetchminmaxwaveform</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement] = fetchminmaxwaveform(obj, ChannelName, WaveformSize, MinWaveformArray, MaxWaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
MinWaveformArray = libpointer('doublePtr', MinWaveformArray);
MaxWaveformArray = libpointer('doublePtr', MaxWaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchMinMaxWaveform', session, ChannelName, WaveformSize, MinWaveformArray, MaxWaveformArray, ActualPoints, InitialX, XIncrement);

MinWaveformArray = double(MinWaveformArray.Value);
MaxWaveformArray = double(MaxWaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the minimum and maximum waveforms that the oscilloscope acquires for the channel you specify. The waveforms are from a previously initiated acquisition. Use this function to fetch waveforms when you set the acquisition type to TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.

The tkdpo4k_InitiateAcquisition function starts an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires the min/max waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You must call this function separately for each enabled channel to obtain the min/max waveforms.

You can call the tkdpo4k_ReadMinMaxWaveform function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadMinMaxWaveform function starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the min/max waveforms for the channel you specify. You call this function to obtain the min/max waveforms for each of the remaining channels.

Notes:

(1) After this function executes, each element in the Min Waveform Array and Max Waveform Array parameters is a voltage.

(2) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.

(3) In the single sequence mode, you use this function according to the IVI specification statement. In the continuous mode, after the first time you call the tkdpo4k_InitiateAcquisition function, you can call this function continuously without initiating acquisition each time for enhancing the waveform-fetching speed. But there is no guarantee that each waveform you fetched is always a new acquired one. Also you cannot modify other configuration during the period of waveform fetching. Otherwise, you need to call the tkdpo4k_InitiateAcquisition function again to make the new configuration valid in this function.</Description>
            </Method>
            <Method>
               <Name>fetchphasemeasurement</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = fetchphasemeasurement(obj, MeasureSource1, MeasureSource2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MeasureSource1 = [double(MeasureSource1) 0];
MeasureSource2 = [double(MeasureSource2) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchPhaseMeasurement', session, MeasureSource1, MeasureSource2, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function fetches the phase measurement.</Description>
            </Method>
            <Method>
               <Name>fetchwaveform</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, InitialX, XIncrement] = fetchwaveform(obj, ChannelName, WaveformSize, WaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
WaveformArray = libpointer('doublePtr', WaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchWaveform', session, ChannelName, WaveformSize, WaveformArray, ActualPoints, InitialX, XIncrement);

WaveformArray = double(WaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the waveform the oscilloscope acquires for the channel you specify. The waveform is from a previously initiated acquisition.  

The tkdpo4k_InitiateAcquisition starts an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You must call this function separately for each enabled channel to obtain the waveforms.

You can call the tkdpo4k_ReadWaveform function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadWaveform function starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the waveform for the channel you specify. You call this function to obtain the waveforms for each of the remaining channels.

Notes:

(1) After this function executes, each element in the Waveform Array parameter is either a voltage or a value indicating that the oscilloscope could not sample a voltage.

(2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Waveform Array to an IEEE-defined NaN (Not a Number) value.  

(3) You can test each element in the Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.

(4) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.

(5) In the single sequence mode, you use this function according to the IVI specification statement. In the continuous mode, after the first time you call the tkdpo4k_InitiateAcquisition function, you can call this function continuously without initiating acquisition each time for enhancing the waveform-fetching speed. But there is no guarantee that each waveform you fetched is always a new acquired one. Also you cannot modify other configuration during the period of waveform fetching. Otherwise, you need to call the tkdpo4k_InitiateAcquisition function again to make the new configuration valid in this function.</Description>
            </Method>
            <Method>
               <Name>fetchwaveformmeasurement</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = fetchwaveformmeasurement(obj, ChannelName, MeasurementFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'tkdpo4k_FetchWaveformMeasurement', session, ChannelName, MeasurementFunction, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function obtains a waveform measurement and returns the measurement value. You specify a particular measurement type, such as rise time, frequency, and voltage peak-to-peak. The waveform on which the oscilloscope calculates the waveform measurement is from an acquisition that you previously initiated.

Use the tkdpo4k_InitiateAcquisition function to start an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You call this function separately for each waveform measurement you want to obtain on a specific channel.

You can call the tkdpo4k_ReadWaveformMeasurement function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadWaveformMeasurement function starts an acquisition on all enabled channels. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. You call this function separately for any other waveform measurement that you want to obtain on a specific channel.

Notes:

(1) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.

(2) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.

  TKDPO4K_ATTR_MEAS_HIGH_REF
  TKDPO4K_ATTR_MEAS_LOW_REF
  TKDPO4K_ATTR_MEAS_MID_REF

(3) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.</Description>
            </Method>
            <Method>
               <Name>forcetrigger</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function forcetrigger(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_ForceTrigger', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sends a command to trigger the oscilloscope.  

Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.</Description>
            </Method>
            <Method>
               <Name>initiateacquisition</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiateacquisition(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_InitiateAcquisition', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates a waveform acquisition. After you call this function, the oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each channel you have enabled with the tkdpo4k_ConfigureChannel function.

Notes:

(1) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.

(2)  When the MATH channel is enabled, any waveform acquisition contains a one-second delay counter to allow for the instrument to settle its calculations on the channel.</Description>
            </Method>
            <Method>
               <Name>initiatecontinuousacquisition</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiatecontinuousacquisition(obj, WaveformSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_InitiateContinuousAcquisition', session, WaveformSize);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function initiates waveform acquisition in continuous acquisition mode. Set the waveform size element to the desired amount.</Description>
            </Method>
            <Method>
               <Name>stopcontinuousacquisition</Name>
               <Location>WaveformAcquisitionLowlevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function stopcontinuousacquisition(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'tkdpo4k_StopContinuousAcquisition', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'tkdpo4k_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function stops waveform acquisition in continuous acquisition mode.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay_Measurement_Direction</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150058);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150058 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the starting point and direction that determines the delay 'to' edge when taking an immediate delay measurement."</Description>
            </Property>
            <Property>
               <Name>Delay_Measurement_Edge</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150059);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150059 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the slope of the edge the oscilloscope uses for the delay 'from' waveform when taking an immediate delay measurement."</Description>
            </Property>
            <Property>
               <Name>Delay_Measurement_Edge_2</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150060);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150060 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the slope of the edge the oscilloscope uses for the delay 'to' waveform when taking an immediate delay measurement."</Description>
            </Property>
            <Property>
               <Name>Measurement_Function</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150054);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150054 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the measurement that the oscilloscope takes.

Valid values:
TKDPO4K_VAL_RISE_TIME -   The length of time for a rising edge of the signal to 
                          rise from the low reference level to the high reference
                          level. The units are seconds.

TKDPO4K_VAL_FALL_TIME -   The length of time for a falling edge of the signal to
                          rise from the high reference level to the low reference
                          level. The units are seconds.

TKDPO4K_VAL_FREQUENCY -   The frequency of one complete cycle in the waveform. The
                          units are hertz.

TKDPO4K_VAL_PERIOD -      The length of time of one complete cycle in the 
                          waveform. The units are seconds.

TKDPO4K_VAL_VOLTAGE_RMS - The true Root Mean Square voltage over an integer number
                          of cycles in the waveform. The units are volts.

TKDPO4K_VAL_VOLTAGE_PEAK_TO_PEAK - The absolute difference between the VOLTAGE_MAX
                          and VOLTAGE_MIN. The units are volts.

TKDPO4K_VAL_VOLTAGE_MAX - The maximum amplitude found in the entire waveform. The 
                          units are volts.

TKDPO4K_VAL_VOLTAGE_MIN - The minimum amplitude found in the entire waveform. The 
                          units are volts.

TKDPO4K_VAL_VOLTAGE_HIGH - The voltage that corresponds to 100% when using the 
                          reference levels. The oscilloscope calculates this value
                          using either the min/max or histogram methods. The
                          min/max method uses the maximum value found. The
                          histogram method uses a common value found above the
                          middle of the waveform. The units are volts.

TKDPO4K_VAL_VOLTAGE_LOW - The voltage the corresponds to 0% when using the 
                                    reference levels. The oscilloscope calculates this
                          value using either the min/max or histogram methods.
                          The min/max method uses the minimum value found, The 
                          histogram method uses a common value found below the 
                          middle of the waveform. The units are volts.

TKDPO4K_VAL_VOLTAGE_AVERAGE - The arithmetic average in volts measured over the 
                          entire waveform. The units are volts.

TKDPO4K_VAL_WIDTH_NEG -   The length of time between the mid reference level 
                          points of a negative pulse in the waveform. The units 
                          are seconds.

TKDPO4K_VAL_WIDTH_POS -   The length of time between the mid reference level 
                          points of a positive pulse in the waveform. The units 
                          are seconds.

TKDPO4K_VAL_DUTY_CYCLE_NEG - The ratio of the WIDTH_NEG to the PERIOD of an 
                          integer number of cycles in the waveform expressed as a 
                          percentage.
                                           WIDTH_NEG
                          DUTY_CYCLE_NEG = --------- * 100%
                                            PREIOD 

 TKDPO4K_VAL_DUTY_CYCLE_POS - The ratio of the WIDTH_POS width to the PERIOD of an 
                          integer number of cycles in the waveform expressed as a 
                          percentage.
                                           WIDTH_POS
                          DUTY_CYCLE_NEG = --------- * 100%
                                            PREIOD 

TKDPO4K_VAL_AMPLITUDE -   The VOLTAGE_HIGH less the VOLTAGE_LOW in volts over the 
                          entire waveform.
                          AMPLITUDE = VOLTAGE_HIGH - VOLTAGE_LOW

TKDPO4K_VAL_VOLTAGE_CYCLE_RMS - The true Root Mean Square voltage over an integer 
                          number of cycles in the waveform. The units are volts.

TKDPO4K_VAL_VOLTAGE_CYCLE_AVERAGE - The arithmetic average in volts over an 
                          integer number of cycles in the waveform. The units are 
                          volts.

TKDPO4K_VAL_POSITIVE_OVERSHOOT - The relative waveform distortion for the rising 
                          edge. It is calculated using the following formula:
                                       local maximum - VOLTAGE_HIGH
                          OVERSHOOT = ------------------------------ * 100%
                                                  AMPLITUDE
                          in which the local maximum is the maximum voltage of the 
                          signal in the first half of the time period that 
                                     commences when the rising edge crosses the high 
                           reference level and concludes when the subsequent 
                          falling edge crosses the high reference level.

TKDPO4K_VAL_NEGATIVE_OVERSHOOT - The relative waveform distortion for the falling 
                          edge. It is calculated using the following formula:
                                       VOLTAGE_LOW - local minimum
                          OVERSHOOT = ----------------------------- * 100%
                                                AMPLITUDE           
                          in which the local minimum is the minimum value of the 
                          signal measured in the first half of the time period 
                          that commences when the falling edge crosses the low 
                          reference level and concludes when the subsequent rising 
                          edge crosses the low reference level.

TKDPO4K_VAL_TIMING_BURST_WIDTH - The duration of a burst. The measurement is made  
                          over the entire waveform or gated region. The units are 
                          seconds.            

TKDPO4K_VAL_PHASE -       The phase difference between two waveforms. The 
                          measurement is made between the middle reference points
                          of the two waveforms. The units are degrees.   

TKDPO4K_VAL_DELAY -       The time between the middle reference amplitude point of 
                          the source waveform and the destination waveform. 
  
TKDPO4K_VAL_AREA -        The voltage over time, The area over the entire 
                          waveform or gated region. The area measured above the 
                          ground is positive, while the area below ground is 
                          negative. The units are volt-seconds. 

TKDPO4K_VAL_CYCLE_AREA -  The voltage over time, The area over the first cycle in 
                          the waveform or the first cycle in the gated region. The 
                          area measured above the common reference point is 
                          positive, while the area below the common reference 
                          point is negative. The units are volt-seconds. 

TKDPO4K_VAL_CROSS_NEG -   The time from the trigger point to the first falling 
                          edge of the waveform or gated region. The time is 
                          measured at the middle reference amplitude point of the 
                          signal. The units are seconds.

TKDPO4K_VAL_CROSS_POS -   The time from the trigger point to the first 
                          positive edge of the waveform or gated region. The time 
                          is measured at the middle reference amplitude point of 
                          the signal. The units are seconds."</Description>
            </Property>
            <Property>
               <Name>Measurement_Gating</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150055);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150055 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the oscilloscope uses gating for the measurement. When you set this attribute to VI_TRUE, you use the vertical cursors to select the portion of the waveform on which the oscilloscope performs the waveform measurement."</Description>
            </Property>
            <Property>
               <Name>Measurement_High_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250607);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250607 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the high reference the oscilloscope uses for waveform measurement. The value is a percentage of the difference between the Voltage High and Voltage Low. The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.

Valid Range: 0.0 to 100.0

Resolution: 1.0"</Description>
            </Property>
            <Property>
               <Name>Measurement_Low_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250608);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250608 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the low reference that the oscilloscope uses for waveform measurement. The value is a percentage of the difference between the Voltage High and Voltage Low. The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
    
Valid Range: 0.0 to 100.0

Resolution: 1.0"</Description>
            </Property>
            <Property>
               <Name>Measurement_Mid2_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150056);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150056 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the mid2 reference level for the 'to' waveform when taking a delay measurement, and is the 50% reference level when MEASU:REFL:MOTH is set to ABSOLUTE. The value is a percentage of the difference between the Voltage High and Voltage Low. The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
    
Valid Range: 0.0 to 100.0

Resolution: 1.0"</Description>
            </Property>
            <Property>
               <Name>Measurement_Mid_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250609);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250609 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the mid reference that the oscilloscope uses for waveform measurement. The value is a percentage of the difference between the Voltage High and Voltage Low. The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
    
Valid Range: 0.0 to 100.0

Resolution: 1.0"</Description>
            </Property>
            <Property>
               <Name>Measurement_Reference_Level_Calculation_Method</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150052);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150052 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the method the oscilloscope uses to calculate the 0.0 % and 100.0 % reference levels."</Description>
            </Property>
            <Property>
               <Name>Measurement_Source</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150053, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150053 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source for all single-channel immediate measurements and the source to measure 'from' for immediate delay or phase measurements.

Valid values:
For four-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_CH_3 ('CH3') - Channel 3
- TKDPO4K_VAL_CH_4 ('CH4') - Channel 4
- TKDPO4K_VAL_REF_1 ('REF1') - Reference 1
- TKDPO4K_VAL_REF_2 ('REF2') - Reference 2
- TKDPO4K_VAL_REF_3 ('REF3') - Reference 3
- TKDPO4K_VAL_REF_4 ('REF4') - Reference 4
- TKDPO4K_VAL_MATH ('MATH') - Math

For two-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_REF_1 ('REF1') - Reference 1
- TKDPO4K_VAL_REF_2 ('REF2') - Reference 2
- TKDPO4K_VAL_REF_3 ('REF3') - Reference 3
- TKDPO4K_VAL_REF_4 ('REF4') - Reference 4
- TKDPO4K_VAL_MATH ('MATH') - Math"</Description>
            </Property>
            <Property>
               <Name>Measurement_Source_2</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150057, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150057 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source to measure 'to' for phase or delay immediate measurements.

Valid values:
For four-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_CH_3 ('CH3') - Channel 3
- TKDPO4K_VAL_CH_4 ('CH4') - Channel 4
- TKDPO4K_VAL_REF_1 ('REF1') - Reference 1
- TKDPO4K_VAL_REF_2 ('REF2') - Reference 2
- TKDPO4K_VAL_REF_3 ('REF3') - Reference 3
- TKDPO4K_VAL_REF_4 ('REF4') - Reference 4
- TKDPO4K_VAL_MATH ('MATH') - Math

For two-channel models:
- TKDPO4K_VAL_CH_1 ('CH1') - Channel 1
- TKDPO4K_VAL_CH_2 ('CH2') - Channel 2
- TKDPO4K_VAL_REF_1 ('REF1') - Reference 1
- TKDPO4K_VAL_REF_2 ('REF2') - Reference 2
- TKDPO4K_VAL_REF_3 ('REF3') - Reference 3
- TKDPO4K_VAL_REF_4 ('REF4') - Reference 4
- TKDPO4K_VAL_MATH ('MATH') - Math"</Description>
            </Property>
            <Property>
               <Name>Measurement_Value</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the measurement value that the oscilloscope obtains."</Description>
            </Property>
            <Property>
               <Name>RF_Spectrogram_Seconds_Number</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151011);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the number of seconds in the spectrogram since continuous acquisition started. 

SCPI Command:
:RF:SPECTRogram:TIMe"</Description>
            </Property>
            <Property>
               <Name>RF_Spectrogram_Time_Stamp</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151010);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the time stamp of the selected spectrogram slice, as specified by :RF:SPECTRogram:SLICESELect.

SCPI Command:
:RF:SPECTRogram:SLICETIMe?"</Description>
            </Property>
            <Property>
               <Name>Snapshot_Measurement_Value</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Read the requested snapshot measurement value from the last snapshot. 

SCPI Command:
:MEASUrement:SNAPShot:TOVershoot?"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>